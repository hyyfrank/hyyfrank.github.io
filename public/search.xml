<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux服务器简单的性能分析方法</title>
      <link href="/2021/05/03/linux/linux-jian-dan-xing-neng-fen-xi/"/>
      <url>/2021/05/03/linux/linux-jian-dan-xing-neng-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux服务器性能分析"><a href="#Linux服务器性能分析" class="headerlink" title="Linux服务器性能分析"></a>Linux服务器性能分析</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>找出性能瓶颈，有目的的系统优化，主要是看一下几个方面：</p><ul><li>应用程序</li><li>操作系统</li><li>服务器硬件</li><li>网络环境<br>比较常见的问题是，cpu使用量很大，造成系统中很多等待的进程，响应缓慢；进程的大量增加造成系统内存资源的使用增加，当物理内存耗尽，就会使用虚拟内存，虚拟内存的使用又造成磁盘IO的增加，并增加cpu的开销，所以其实性能优化是在硬件，操作系统，软件之间找一个平衡点。<h2 id="主要考虑的优化因素"><a href="#主要考虑的优化因素" class="headerlink" title="主要考虑的优化因素"></a>主要考虑的优化因素</h2></li><li>硬件方面： CPU, 内存， 磁盘IO, 网络带宽</li><li>OS方面：<ul><li>系统安装优化： 磁盘划分(选择恰当的RAID级别)，swap内存设置（内存小于4G，swap就设一般，内存4G~16G，swap可以设置稍微小于内存大小就行）</li><li>内核参数优化： oracle数据库可以调整下系统共享内存段kernel.shmmax,kernel.shmmni,kernel.shmall，系统信号量kernal.sem，文件句柄fs.file-max等。常见的网站应用，可以调整下tcp的参数，比如net.ipv4.ip_local_port_range, net.ipv4.tcp_tw_reuse,net.core.somaxconn等等。调整的时候要注意网络环境，看是不是NAT,因为有些参数可能有影响，比如recyle参数。</li><li>文件系统优化：主要是ext2,ext3,xfs,ReiserFS</li></ul></li><li>应用程序方面：主要是代码层级的优化<h2 id="分析的原则"><a href="#分析的原则" class="headerlink" title="分析的原则"></a>分析的原则</h2></li><li>cpu使用量加起来不超过70%</li><li>内存：swap in/out ==0 </li><li>磁盘：iowait &lt; 20% 就是说，cpu等待输入输出完成时间的百分比<h2 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h2></li><li>虚拟内存统计</li></ul><pre class=" language-shell"><code class="language-shell">    vmstat [-V] [-n] [delay [count]]</code></pre><ul><li>获取系共同的cpu,运行队列，磁盘IO,分页，内存，cpu中断，网络性能等数据</li></ul><pre class=" language-shell"><code class="language-shell">    sar [options] [-o filename] [interval [count]]</code></pre><p>*I/O统计</p><pre class=" language-shell"><code class="language-shell">    iostat [-c | -d] [-k] [-t] [-x [device]] [interval [count]]</code></pre><ul><li>还有一些比如：free, uptime, netstat, top，如果协议问题的话，可以用wire shark来分析,如果是应用软件方面的话，有些是有相应的分析工具的，可以结合着分析</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本上面的命令可以帮你定位瓶颈在哪里，结合自身情况具体分析，找到硬件，操作系统，软件之间找一个优化平衡点，这样才能高效的使用当前的资源，发挥更大的效益。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《大型网站技术架构》- 重温</title>
      <link href="/2021/02/03/hou-duan/book/da-xing-wang-zhan-ji-zhu-jia-gou/"/>
      <url>/2021/02/03/hou-duan/book/da-xing-wang-zhan-ji-zhu-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="日日新"><a href="#日日新" class="headerlink" title="日日新"></a>日日新</h1><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>  先说下感受吧，其实现在很多网站设计或大或小，这书大体都会覆盖，关键是深度自己理解到多少罢了，不得不说2014刚出来的时候我就第一时间看完了，非常爽，但是自己去一步步实施的时候，一步步走来，感觉这本书更多的是提纲挈领，但是细节是魔鬼，谁搞过谁知道。或者换个角度讲，蛮多企业都是按照这个演化路径，正在逐步改善，只是有时候业务场景不同，所以选了别的技术方案，但大体解决的痛点或多或少是有一定的共通性，我们以前叫做不变性和可变性。重温一遍，发现这两年都关注到业务上，这些东西或多或少都还给书本了，温故而知新，再读一遍！</p><h2 id="概述部分"><a href="#概述部分" class="headerlink" title="概述部分"></a>概述部分</h2><p>  概述部分就讲述了网站演化的过程，非常直接明了，包括服务数据分离，使用缓存改善性能，db读写分离，反向代理和CDN加速，分布式文件系统和分布式数据库系统，nosql和搜索引擎，业务拆分和分布式服务。基本包含了网站设计的方方面面，为后面的架构模式详细分析先铺陈一下。同时说明一点很重要的就是，业务发展是驱动技术发展的主要动力。<br>  架构模式部分，具体分析了分层，分割，分布式，集群，缓存，异步，冗余，自动化和安全。我做6年后端来，感觉是有的目标基本都是围绕这些展开。这个角度看，其实是按照技术上具体技术来分的，后面的架构核心要素，才是真正从性能，可用性，伸缩性，扩展性，安全性等非功能性指标来讲解。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>  这部分其实就是从上面提到的几个非功能性指标触发，结合具体的技术分析，怎么做才能达到高性能，高可用，可伸缩，可扩展，以及安全第一的网络架构。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>  最后是具体分析案例来说明之前提到的架构理念</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  感觉其实自己架设的方案和现在的云计算大行其道的方案，还是或多或少有些不一样的，但是基本理念是一致的。云计算的大环境下可能还是需要结合云供应商的技术方案做一些权衡，比如有些没有办法自己定制负载均衡的逻辑，有些固定就有一些方案，如果你不改成异步的代码，压根无法适应云供应商的基础设施，这些方面作为架构师在做技术决策的时候可能是更需要考虑的。还有些做容器化，云原生的方案，监控，报警，容器之间通信的协议和速度，日志等等几乎都要重新设计和权衡，这些都是架构上的难点，如果不是完全自己去架设，有些技术是没办法如同书上写的那么随心所欲的去使用的。所以这本书告诉我们基本的架构原则，希望达到什么样的目标，一般怎么去做，换到云原生环境下，怎么去实现这些目标，就要结合云供应商和当前的公司技术能力来做一些权衡了。    </p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BloomFilter的应用</title>
      <link href="/2020/07/02/hou-duan/bloomfilter/bloomfilter/"/>
      <url>/2020/07/02/hou-duan/bloomfilter/bloomfilter/</url>
      
        <content type="html"><![CDATA[<h1 id="BloomFilter概念"><a href="#BloomFilter概念" class="headerlink" title="BloomFilter概念"></a>BloomFilter概念</h1><p>布隆过滤器的原理是，当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素很可能在。这就是布隆过滤器的基本思想。<br>Bloom Filter跟单哈希函数Bit-Map不同之处在于：Bloom Filter使用了k个哈希函数，每个字符串跟k个bit对应。从而降低了冲突的概率。<br><img src="https://pic3.zhimg.com/80/v2-0e1e229f20ed9c108bc596d848cea5b2_1440w.jpg" width="100% !important"></p><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>意思是我写一个不存在的ID，一直去访问redis，没命中的话，就会都落到数据库，为了避免这种问题，需要先判断下元素在不在，不在的话，直接返回，降低数据库的压力。</p><h1 id="bloomfilter的不足"><a href="#bloomfilter的不足" class="headerlink" title="bloomfilter的不足"></a>bloomfilter的不足</h1><p>bloom filter之所以能做到在时间和空间上的效率比较高，是因为牺牲了判断的准确率、删除的便利性</p><ul><li>存在误判，可能要查到的元素并没有在容器中，但是hash之后得到的k个位置上值都是1。如果bloom filter中存储的是黑名单，那么可以通过建立一个白名单来存储可能会误判的元素。</li><li>删除困难。一个放入容器的元素映射到bit数组的k个位置上是1，删除的时候不能简单的直接置为0，可能会影响其他元素的判断。可以采用Counting Bloom Filter</li></ul><h1 id="我在项目是怎么做的"><a href="#我在项目是怎么做的" class="headerlink" title="我在项目是怎么做的"></a>我在项目是怎么做的</h1><pre class=" language-JavaScript"><code class="language-JavaScript">const hashers = (value, times) => {  const hash = crypto.createHash('sha1').update(value).digest();  const h1 = hash.readUInt32BE(8);  const h2 = hash.readUInt32BE(12);  const hashes = [];  //only two hash functions are necessary to effectively implement a Bloom filter without   //any loss in the asymptotic false positive probability  for (let i = 1; i <= times; i++) {    hashes.push(h1 + h2 * i);  }  return hashes;};class BloomFilter {  constructor({ cache, size = 1000000, errorRate = 0.005 }) {    if (cache) {      const [mark, m, k, e, bits] = cache;      this._m = m;      this._k = k;      this._e = e;      this._bits = new Bits(0, bits);    } else {      this._m = Math.round((-1 * size * Math.log(errorRate)) / LN2_SQUARE);      if (this._m % BYTE_LEN) {        this._m += (BYTE_LEN - (this._m % BYTE_LEN));      }      this._k = Math.max(1, Math.round(this._m / size * Math.LN2));      this._e = errorRate;      this._bits = new Bits();    }  }  add(value) {    if (isInteger(value)) {      this._bits.set(value);    } else {      hashers(value, this._k).forEach(_ => this._bits.set(_ % this._m));    }    return this;  }  has(value) {    if (isInteger(value)) {      return this._bits.get(value);    }    return hashers(value, this._k).every(_ => this._bits.get(_ % this._m));  }}module.exports = BloomFilter;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从实现上说，guava也有对应实现了，这里是用node写的，这里的hash函数是参照下面参考文件来设置</p><p>【1】 <a href="https://www.eecs.harvard.edu/~michaelm/postscripts/rsa2008.pdf" target="_blank" rel="noopener">https://www.eecs.harvard.edu/~michaelm/postscripts/rsa2008.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bloom filter </tag>
            
            <tag> algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求指数的另一种算法</title>
      <link href="/2020/04/02/hou-duan/suan-fa/pow/"/>
      <url>/2020/04/02/hou-duan/suan-fa/pow/</url>
      
        <content type="html"><![CDATA[<h1 id="从一道算法题开始"><a href="#从一道算法题开始" class="headerlink" title="从一道算法题开始"></a>从一道算法题开始</h1><ul><li>Problem: Implement pow(x, n), which calculates x raised to the power n (i.e., xn).</li><li>Solution 1 as below, 这个是最直观的可以想到的方法了<pre class=" language-c++"><code class="language-c++">class Solution {public:double myPow(double x, int n) {   if(x == 1.0) return 1;   if(n == 0) return 1;   if(n<0){     n = -n;     x = 1/x;   }   return (n%2 == 0) ? pow(x*x, n/2) : x*pow(x*x, n/2);}}</code></pre></li><li>Solution2,有趣的解法是在一篇论文中看到的，分享下，感觉也蛮优雅的<pre class=" language-c++"><code class="language-c++">class Solution {public:    double myPow(double x, int n) {        bool isNegative = false;        if(x == 1.0) return 1;        if(n == 0){return 1;}        if(n<0) {isNegative = true;}        if(isNegative){n=abs(n);}        double P;        while((n&1)==0){//even for this bit            x = x*x;            n>>=1;        }        P = x;        n>>=1;        while(n>0){            x = x * x;            if((n&1)!=0){P = P * x;}            n>>=1;        }        return isNegative? 1/P:P;    }};</code></pre>按位运算，也是很强了，奇码共赏析！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how autodesk use webassembly</title>
      <link href="/2019/10/02/qian-duan/webassembly/"/>
      <url>/2019/10/02/qian-duan/webassembly/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是web-assembly"><a href="#什么是web-assembly" class="headerlink" title="什么是web assembly"></a>什么是web assembly</h2><p>就是一个可移植、体积小、加载快并且兼容 Web 的全新格式。可以使用C、C++、Rust、Go、Java、C#等编译器来生成wasm,以二进制的方式发送给浏览器，可以增强javascript的效率。目前的实践情况有c++开发的大型游戏，google earth, Magnum，Blazor，我司的autocad.这里主要介绍我司的autocad.</p><h2 id="为什么用web-assembly"><a href="#为什么用web-assembly" class="headerlink" title="为什么用web assembly"></a>为什么用web assembly</h2><p>这个就不必说了，主要是效率问题，js显然对于效率这块有点无能为力。对于大型游戏和对于画图这种很重cpu,内存的，以及高并发的场景，javascript支持其实有限，当然也有增加这方面的能力，比如sharedArrayBuffer来提供某种程度的并发，但是其实还是相当有限。我司的使用是emScripten和asm.js然后，后面用更加优化的Binaryen,整体速度提高了大概12%-15%左右。</p><h2 id="我们怎么用"><a href="#我们怎么用" class="headerlink" title="我们怎么用"></a>我们怎么用</h2><p>我们主要是用emScripten来把c++编译成wasm.主要问题在于：</p><ul><li>代码code base太大</li><li>应用启动时间长</li><li>桌面应用和网站的区别<ul><li>同步和异步IO<ul><li>浏览器主线程不允许阻塞调用，不然就很卡了，重写可能比较麻烦，第三方库可能也需要重写</li><li>弄个web worker来做也有点问题，比如阻塞的调用，我后面onMessage接受不到数据，也没有共享内存，没有类似信号量的机制来保证我的通讯机制</li></ul></li><li>缺乏共享内存<ol><li>Emterpreter: 他是可以把asm.js编译成bytecode,然后有个解释器可以来跑，可以支持同步,主要是有可以保存执行的状态和堆栈，然后有个定时器，然后恢复堆栈和状态这样的方式来支持同步。问题是执行太慢，而且没有一种确切的方式来识别栈中的函数，维护也困难。</li><li>SharedArrayBuffer:很快，但是要手动去处理序列化，更大的问题是有幽灵攻击的漏洞存在，所以也不行<br><img src="/images/9.png" alt="SharedArrayBuffer"></li><li>service worker &amp; xhr: 使用同步XHR来模拟阻塞调用，用service worker来拦截网络调用，当有新版本的service worker上线的时候，用户要刷新才能看到,这里就要自己管理版本保证一致性，所以需要做个后台更新,还有就是启动的时候需要等待service worker的启动完成，这也算是一个启动时间的一种负担<br><img src="/images/11.png" alt="Service Worker &amp; Sync XHR"></li></ol></li></ul></li></ul><ul><li><p>内存访问不一致性的问题<br>第一，asm.js直接不支持，wasm跑的很慢，主要是涉及一些强制类型转换的时候的内存拷贝，比如char的指针拷贝到int的指针的位置，所以后来统一换成了memcpy,主要是code修改，避免wasm变慢影响性能。</p><pre class=" language-C++"><code class="language-C++">    int* a = new int;    unsigned char b = 1;    a = (int*) &b;    /*改成*/    memcpy(a,&b,sizeof(int))</code></pre><p>第二是：函数指针的转换，emscripten的函数指针需要严格类型</p><pre class=" language-C++"><code class="language-C++">     typedef void (*voidType)(int);     int myfun(int a){}     voidType fn = (voidType)myfun; //这里报错 </code></pre><p>优化后82个子项目提升了50%左右，构建从90分钟降低到50分钟</p></li><li><p>不支持异常：移除部分异常，提高效率</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>启动过程，从UI主线程开始，首先是UI初始化，service worker初始化，初始化web worker,web worker里边又包括wasm初始化，下载资源（font, 国际化的数据等等），然后是c++初始化启动的代码。</li><li>启动优化：因为web worker中的wasm实例化占了大部分的时间，所以web assembly实例化的速度可以优化，还有就是代码优化比如O3(采取很多向量化算法，提高代码的并行执行程度，利用现代CPU中的流水线，Cache等),降低code size移除异常等等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web assembly </tag>
            
            <tag> web worker </tag>
            
            <tag> service worker </tag>
            
            <tag> emscripten </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis消息队列实现的一些考虑</title>
      <link href="/2019/06/01/hou-duan/redis/redis-1/"/>
      <url>/2019/06/01/hou-duan/redis/redis-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis作为队列的一些优缺点"><a href="#Redis作为队列的一些优缺点" class="headerlink" title="Redis作为队列的一些优缺点"></a>Redis作为队列的一些优缺点</h1><ul><li><p>设计决策考虑</p></li><li><p>redis做消息队列的方式</p><ol><li>基于List的LPUSH+BRPOP的实现</li><li>PUB/SUB，订阅/发布模式</li><li>基于Sorted-Set的实现</li><li>基于Stream类型的实现</li></ol></li><li><p>主要注意问题</p><ol><li><p>消息顺序保证</p></li><li><p>消息重复消费</p><ol><li>重复消息的来源可能是来自生产者，来自消息队列，甚至消费者。<ul><li>可能是生产者没做幂等性处理，或者mq的速度慢，导致重试机制触发，又发了一条；</li><li>消费者消费完一条数据响应 ack 信号消费成功时，MQ 突然挂了，导致 MQ 以为消费者还未消费该条数据，MQ恢复后再次推送了该条消息，导致了重复消费；</li><li>消费者已经消费完了一条消息，正准备但是还未给 MQ 发送 ack 信号时，此时消费者挂了，服务重启后 MQ 以为消费者还没有消费该消息，再次推送了该条消息。</li></ul></li></ol></li><li><p>消息丢失</p><ol><li><p>生产者在发布消息时异常：</p><ul><li>网络故障或其他问题导致发布失败（直接返回错误，消息根本没发出去）</li><li>网络抖动导致发布超时（可能发送数据包成功，但读取响应结果超时了，不知道结果如何）<ul><li>第一种情况还好，消息根本没发出去，那么重新发一次就好了。但是第二种情况就没办法知道到底有没有发布成功，所以也只能再发一次。所以这两种情况，生产者都需要重新发布消息，直到成功为止（一般设定一个最大重试次数，超过最大次数依旧失败的需要报警处理）。这就会导致消费者可能会收到重复消息的问题，所以消费者需要保证在收到重复消息时，依旧能保证业务的正确性（设计幂等逻辑），一般需要根据具体业务来做，例如使用消息的唯一ID，或者版本号配合业务逻辑来处理。</li></ul></li></ul></li><li><p>消费者在处理消息时异常：</p><ul><li>也就是消费者把消息拿出来了，但是还没处理完，消费者就挂了。这种情况，需要消费者恢复时，依旧能处理之前没有消费成功的消息。使用List当作队列时，也就是利用老师文章所讲的备份队列来保证，代价是增加了维护这个备份队列的成本。而Streams则是采用ack的方式，消费成功后告知中间件，这种方式处理起来更优雅，成熟的队列中间件例如RabbitMQ、Kafka都是采用这种方式来保证消费者不丢消息的。</li></ul><ol start="3"><li>消息队列中间件丢失消息</li></ol><ul><li>上面2个层面都比较好处理，只要客户端和服务端配合好，就能保证生产者和消费者都不丢消息。但是，如果消息队列中间件本身就不可靠，也有可能会丢失消息，毕竟生产者和消费这都依赖它，如果它不可靠，那么生产者和消费者无论怎么做，都无法保证数据不丢失。<ul><li>在用Redis当作队列或存储数据时，是有可能丢失数据的：一个场景是，如果打开AOF并且是每秒写盘，因为这个写盘过程是异步的，Redis宕机时会丢失1秒的数据。而如果AOF改为同步写盘，那么写入性能会下降。另一个场景是，如果采用主从集群，如果写入量比较大，从库同步存在延迟，此时进行主从切换，也存在丢失数据的可能（从库还未同步完成主库发来的数据就被提成主库）。总的来说，Redis不保证严格的数据完整性和主从切换时的一致性。我们在使用Redis时需要注意。</li><li>而采用RabbitMQ和Kafka这些专业的队列中间件时，就没有这个问题了。这些组件一般是部署一个集群，生产者在发布消息时，队列中间件一般会采用写多个节点+预写磁盘的方式保证消息的完整性，即便其中一个节点挂了，也能保证集群的数据不丢失。当然，为了做到这些，方案肯定比Redis设计的要复杂（毕竟是专们针对队列场景设计的）。</li></ul></li></ul></li></ol></li><li><p>消息堆积</p></li></ol></li><li><p><strong>第一种方法：List</strong></p><ul><li>基于list的方法很简单，就是lpush, rpop，这样基本<strong>有序</strong>肯定能保证，问题是这里有个性能上的考虑，就是生产者生产了消息，但是消费者要去轮询，或者一个while loop去判断，这里cpu时间就会一直在这个上浪费时间了，所以最好用BRPOP,这样客户端去读，读不到的时候回阻塞，直到有新的数据写入队列，相对rpop来说会节约cpu时间；</li><li>接着看<strong>重复消息</strong>问题， 这里有个<strong>幂等性</strong>问题，怎么保证消费者处理一次消息和处理多次消息的结果是一致的，从这个角度说，我可能需要个全局的消息ID来判断</li><li>消息<strong>可靠性</strong>怎么保证，会不会<strong>丢失</strong>，也是需要考虑的。因为我们是list来做消息队列，那如果碰到没处理成功又该如何呢？这里就需要一种恢复机制来保证可靠性，最简单的，我可以做一个list，要处理之前，先把id加入该list，如果失败,可以指定是哪个id没处理成功，重新做一次，但是这样仍然还是无法保证的，因为还有一种情况是redis本身挂了，那list里能否保证加入id成功，也是未知的，所以这里只是提了个简单方法，并无法完全保证可靠性得到解决</li><li>对于<strong>消息的堆积</strong>问题，就是生产消息太快，消费太慢导致的，目前redis似乎没有直接处理的方式，不支持分组，但是stream方式可以支持，一会儿会谈到。</li></ul></li><li><p><strong>第二种方法：Pub/Sub</strong></p><ul><li>发布订阅模式使用PUBLISH/SUBSCRIBE channel message来做订阅，消息的<strong>顺序性</strong>上说感觉也是比较直观的，场景上，可以做聊天，或者实时的一些配置的更新，通知，公告这里都可以用发布订阅简单实现</li><li>重复性上说，如果消息重复，还是需要订阅者判断，比如通过状态判断，每次消费后把状态记录下来，下次直接去查询下看看是否消费过，也可以依赖于数据库的唯一性约束防止重复的消费，所以这块幂等性的处理很重要。</li><li>发布订阅过程中，如果有订阅者掉线了，重新上线之后，掉线的消息是丢失的</li><li>消息堆积问题和回溯都有问题，也无法保证每个订阅的人消息收到的时间是一样的，而且生产远大于消费的时候，有可能强制断开导致消息丢失</li></ul></li><li><p><strong>第三种方法：基于Sorted-Set的实现</strong></p><ul><li>这种可能不是特别关心顺序，反而更倾向于实现类似优先级队列之类的功能，比如做各种排行榜之类的功能</li><li>不允许重复消息，不支持分组消费</li><li>为了防止消息丢失，可能需要自己实现消费确认机制</li><li>堆积问题，可以用多个消费者来消费</li></ul></li><li><p><strong>第四种方法：基于Stream类型的实现</strong></p><ul><li>有序性是通过XADD/XREAD,XADD插入有序，自动生成全局ID,XREAD可以通过ID读取。可以使用XREAD block来实现类似阻塞读的功能</li><li>重复性可以处理，因为有全局唯一ID</li><li>可靠性可以依靠内部的pending list自动留存消息，可以用XPENDING查看，使用XACK确认消息</li><li>堆积问题，可以使用消费分组来做，增加消费速度</li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Redis可以用作队列，而且性能很高，部署维护也很轻量，但缺点是无法严格保数据的完整性（个人认为这就是业界有争议要不要使用Redis当作队列的地方）而使用专业的队列中间件，可以严格保证数据的完整性，但缺点是，部署维护成本高，用起来比较重。所以我们需要根据具体情况进行选择，如果对于丢数据不敏感的业务，例如发短信、发通知的场景，可以采用Redis作队列。如果是金融相关的业务场景，例如交易、支付这类，建议还是使用专业的队列中间件</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像最小化</title>
      <link href="/2019/04/02/hou-duan/rong-qi-bian-pai/docker/"/>
      <url>/2019/04/02/hou-duan/rong-qi-bian-pai/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>这里不谈论一些基础的使用，主要说说，我怎么让docker镜像变小的方法</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>从代码上看我做了几步操作来降低docker image的size</p><pre class=" language-Dockerfile"><code class="language-Dockerfile">    FROM artifactory.dev.net/alpine:latest    # Download and unarchive Java, NodeJS and boto3    RUN apk --no-cache add ca-certificates && \        set -x && \        curl -o zulu8.42.tar.gz https://art-bobcat.autodesk.com/artifactory/openjdk-azul/Zulu8/8.42/alpine/zulu8-sa-8.0.232-r4.apk_repo.x86_64.tar.gz &&\        tar zxvf zulu8.42.tar.gz &&\        apk add --allow-untrusted zulu8-8.0.232-r4.apk_repo.x86_64/x86_64/*jre*.apk &&\        rm -rf zulu8-8.0.232-r4.apk_repo.x86_64 &&\        rm zulu8.42.tar.gz &&\        apk add --no-cache nodejs && \        pip3 install --no-cache-dir boto3 && \        apk --no-cache --update --virtual .build-deps add \            curl \            gzip \            tar && \        apk del .build-deps</code></pre><ul><li>base image选择alpine,这里注意一点，如果是按照python一些分析库，可能需要重新编译gcc,由于Alpine镜像使用的根本不是gnu libc而是musl libc，所以/lib64/ld-linux-x86-64.so.2是不存在的，而实际上/lib64都是不存在的,所以可能需要自己手动再装一下</li><li>安装完后，中间文件要删除，比如这段</li></ul><pre class=" language-shell"><code class="language-shell">apk --no-cache --update --virtual .build-deps add \            curl \            gzip \            tar && \apk del .build-deps</code></pre><ul><li>使用multiple stage,然后用copy –from这样拷贝进去</li><li>run命令会增加一个layer,大多数时候你不是写很多RUN而应该把他们尽可能放在一个RUN里，这样只有一层，可以减少不少的size.</li><li>额外谈一点，docker原生的一号线程树，应该做一些处理，否则，比如你做成了container，使用程序来kill一号进程树，其实是杀不了的，可以用一些简单的库fix掉，或者有个tricky的方式就是你直接用shell的特点fork来做一个新的，实测也能杀掉，不过这种方法不够通用.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指数退避算法的应用</title>
      <link href="/2019/03/02/hou-duan/zhi-shu-hui-tui/backoff/"/>
      <url>/2019/03/02/hou-duan/zhi-shu-hui-tui/backoff/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是指数退避算法"><a href="#什么是指数退避算法" class="headerlink" title="什么是指数退避算法"></a>什么是指数退避算法</h1><ul><li><p>维基百科概念：</p><blockquote><p>In a variety of computer networks, binary exponential backoff or truncated binary exponential backoff refers to an algorithm used to space out repeated retransmissions of the same block of data, often to avoid network congestion.</p></blockquote><h1 id="项目中怎么使用"><a href="#项目中怎么使用" class="headerlink" title="项目中怎么使用"></a>项目中怎么使用</h1></li><li><p>项目中我们主要是在做aws请求的时候，做了这个处理，直接上代码可能理解起来简单点，网络上的大量组件 (例如 DNS 服务器、交换机、负载均衡器等) 都可能在某个指定请求生命周期中的任一环节出现问题。在联网环境中，处理这些错误回应的常规技术是在客户应用程序中实施重试。此技术可以提高应用程序的可靠性和降低开发人员的操作成本</p></li><li><p>backoff algorithm[random jitter back off]</p></li><li><pre class=" language-JavaScript"><code class="language-JavaScript">    let retryInMs : number = 0;    let temp1 : number = Math.min(maxThrottleRetryDelay,backOffBase*Math.pow(2,currentThrottleRetryTime)); // exponential back-off    let temp2 : number = Math.random()*temp1; // add random jitter    if(randomStart){        retryInMs  = Math.floor(temp2);    }</code></pre><p>其实就是使用了random jitter back off,主要是计算重试的时间,这个操作是在throttle之后做的</p><ul><li><pre class=" language-JavaScript"><code class="language-JavaScript">  let retryInMs : number = random_between(0,min(cap,base**2**attempt))</code></pre></li><li>以前只在apue看到过这类应用，摘抄在这里，以便以后翻阅<pre class=" language-C++"><code class="language-C++">#include "apue.h"#include <sys/socket.h></code></pre></li></ul><p>#define MAXSLEEP 128</p><p>int connect_retry(int domain, int type, int protocol,</p><pre><code>              const struct sockaddr *addr, socklen_t alen)</code></pre><p>{</p><pre><code>int numsec, fd;/** 使用指数退避尝试连接*/for (numsec = 1; numsec &lt; MAXSLEEP; numsec &lt;&lt;= 1){    if (fd = socket(domain, type, protocol) &lt; 0)        return (-1);    if (connect(fd, addr, alen) == 0)    {        /*        * 连接接受        */        return (fd);    }    close(fd);    /*    * 延迟后重试    */    if (numsec &lt;= MAXSLEEP / 2)        sleep(numsec);}return (-1);</code></pre><p>}<br>```</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般限流后，如果发生需要重试的场景，那么加上指数避让算法来做重试，可以有效避免马上又冲突的情况</p><h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p>【1】<a href="https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/" target="_blank" rel="noopener">https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms </tag>
            
            <tag> backoff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种负载均衡的方法</title>
      <link href="/2019/01/02/hou-duan/fu-zai-jun-heng/loadbalance/"/>
      <url>/2019/01/02/hou-duan/fu-zai-jun-heng/loadbalance/</url>
      
        <content type="html"><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><ul><li><p>常见算法</p><ul><li>Round Robin</li><li>Weight Round Robin</li><li>Random</li><li>Least Connection</li><li>Source Hashing</li></ul></li><li><p>实现负载均衡的几种技术</p><ul><li>HTTP重定向：其实就是增加一个服务器，来解析当前请求到具体的服务器ip上，返回的是一个重定向302，但是可能会有SEO作弊的嫌疑，而且要两次请求才能请求完成，太坑爹了</li><li>DNS域名负载均衡: 优点是把负载均衡的事情扔给dns,省掉网站维护的麻烦，同时dns还可以解析成地理位置最近的。缺点是dns多层解析，这样一来每一层如果缓存A记录的话，如果有下线的机器，就可能解析到下线的机器里，而且DNS负载均衡的控制权在域名服务商那里，很难维护。现在是部分使用，作为第一级负载均衡手段，解析到自己的负载均衡服务器，再自己来控制分发到具体的物理服务器上</li><li>反向代理：http层面的负载均衡，反向代理服务器可以用来缓存资源改善网站性能，当然也可以做负载均衡，做负载均衡的话，要配内部外部两套IP地址，缺点是所有请求都要经过它，可能会是性能瓶颈</li><li>IP负载均衡：网络四层负载均衡，负载均衡设备在接收到第一个来自客户端的 SYN 请求时，选择一个最佳的服务器，并对报文中目标 IP 地址进行修改(改为后端服务器 IP），直接转发给该服务器。 TCP 的连接建立，即三次握手是客户端和服务器直接建立的，负载均衡设备只是起到一个类似路由器的转发动作,为保证服务器回包可以正确返回给负载均衡设备，在转发报文的同时可能还会对报文原来的源地址进行修改,即源地址转换SNAT,和上面一样，受限于负载服务器的带宽</li><li>数据链路层的负载均衡：通过在数据链路层修改mac地址，达到负载均衡的目的，三角传输模式，也就是数据传输不改ip地址，只改mac地址。通过配置真是无力服务器集群是有机器虚拟IP和负载均衡服务器IP地址一致，从而达到不修改数据包的源地址和目的地址就可以进行数据分发的目的，由于实际处理请求的真是物理服务器IP和数据请求目的IP的一致，不需要经过LB服务器进行转换，直接返回给用户浏览器，所以也叫直接路由方式DR.这种方式应用较多的是LVS,也是大型网站使用最广的负载均衡手段。接下来会写一篇讲LVS的</li></ul></li><li><p>AWS的负载均衡方案<br>这里摘抄一段网络文本：</p><ul><li><p>————我是分割线—————<br>Amazon 提供的 ELB 服务包含三种类型：ALB, NLB, CLB。</p></li><li><p>ALB<br>Application Load Balancer 运行于请求级别（第 7 层），可根据请求的内容将流量路由至 EC2 实例、容器、IP 地址和 Lambda 函数等目标。Application Load Balancer 最适合 HTTP 和 HTTPS 流量的高级负载均衡，面向交付包括微服务和基于容器的应用程序在内的现代应用程序架构，提供高级请求路由功能。Application Load Balancer 通过确保始终使用最新的 SSL/TLS 密码和协议，简化并提高应用程序的安全性。<br>ABL于2016年8月发布，与现有的负载均衡器（OSI第4层TCP/UDP均衡器）不同，ALB将查看数据包并将其发送到正确的服务。单个ALB可以为许多后端服务平衡流量，而不是为每个服务运行弹性负载均衡器。例如，包含的URL /api可以路由到与包含的URL /signup不同的后端服务。</p></li><li><p>NLB<br>Network Load Balancer 网络负载均衡器运行于连接级别（第 4 层），可根据 IP 协议数据将连接路由至 Amazon Virtual Private Cloud (Amazon VPC) 内的不同目标（Amazon EC2 实例、微服务和容器）。网络负载均衡器最适合 TCP 流量的负载均衡，能够在保持超低延迟的同时每秒处理数百万个请求。网络负载均衡器还经过了优化，能够处理突发的和不稳定的流量模式，同时在每个可用区使用单个静态 IP 地址。它与其他流行的 AWS 服务集成，例如 Auto Scaling、Amazon EC2 Container Service (ECS)、Amazon CloudFormation 和 Amazon AWS Certificate Manager (ACM)。</p></li><li><p>CLB<br>Classic Load Balancer 同时运行于请求级别和连接级别，可在多个 Amazon EC2 实例之间提供基本的负载均衡。Classic Load Balancer 适用于在 EC2-Classic 网络内构建的应用程序。在使用 Virtual Private Cloud (VPC) 时，我们建议使用第 7 层 Application Load Balancer 和第 4 层网络负载均衡器。</p><p>使用 CLB 而不是 ALB 具有以下优势：<br>支持 EC2-Classic<br>支持 TCP 和 SSL 侦听器<br>支持使用应用程序生成的 cookie 的粘性会话<br>CLB速度慢于ALB。</p></li></ul></li><li><p>————-我是分割线—————  </p></li><li><p>因为我司用的是instance,所以还是停留在CLB上，至于一些场景，比如同一个请求要到同一台机器，还是使用sticky session实现，auto-scaling我会另外写一篇。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms </tag>
            
            <tag> load balance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一致性哈希算法</title>
      <link href="/2018/07/03/hou-duan/redis/consistenthashing/"/>
      <url>/2018/07/03/hou-duan/redis/consistenthashing/</url>
      
        <content type="html"><![CDATA[<h2 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h2><p>TODO</p><p>[1] Karger, D.; Lehman, E.; Leighton, T.; Panigrahy, R.; Levine, M.; Lewin, D. Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web. Proceedings of the Twenty-ninth Annual ACM Symposium on Theory of Computing. ACM Press New York, NY, USA: 654–663. 1997. doi:10.1145/258533.258660.</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react with webpack(七)</title>
      <link href="/2017/10/03/qian-duan/webpack-scaffold-7/"/>
      <url>/2017/10/03/qian-duan/webpack-scaffold-7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="增加-react—redux-支持"><a href="#增加-react—redux-支持" class="headerlink" title="增加 react—redux 支持"></a>增加 react—redux 支持</h1><h2 id="add-redux-amp-amp-react-redux-support"><a href="#add-redux-amp-amp-react-redux-support" class="headerlink" title="add redux &amp;&amp; react-redux support"></a>add redux &amp;&amp; react-redux support</h2><pre class=" language-shell"><code class="language-shell">npm install --save redux react-redux</code></pre><h2 id="代码上的改动"><a href="#代码上的改动" class="headerlink" title="代码上的改动"></a>代码上的改动</h2><p><img src="/images/1.png" alt="react_redux"><br><img src="/images/2.png" alt="react_redux"></p><h2 id="分析下这个代码改动"><a href="#分析下这个代码改动" class="headerlink" title="分析下这个代码改动"></a>分析下这个代码改动</h2><ul><li>原来的 HomeComponent 变成了 App,并且 App 组件有个 connect 方法，方法有两个参数 mapStateToProps，mapDispatchToProps</li><li>Provider 使组件层级中的 connect()方法都能够获得 Redux store。正常情况下，你的根组件应该嵌套在 Provider 中才能使用上面那条说的 connect()方法</li></ul><h3 id="具体说下这些函数的功能"><a href="#具体说下这些函数的功能" class="headerlink" title="具体说下这些函数的功能"></a>具体说下这些函数的功能</h3><ol><li>mapStateToProps 是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state 对象到（UI 组件的）props 对象的映射关系</li><li>mapDispatchToProps 是 connect 函数的第二个参数，用来建立 UI 组件的参数到 store.dispatch 方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。</li><li>React-Redux 提供 connect 方法，用于从 UI 组件生成容器组件</li><li>React-Redux 提供 Provider 组件，可以让容器组件拿到 state。</li></ol><p>具体如何调用，找了张图，画的还可以：<br><img src="/images/react-redux-workflow.png" alt="react-redux-workflow.png"></p><h3 id="creatstore"><a href="#creatstore" class="headerlink" title="creatstore"></a>creatstore</h3><p>方法：createStore(reducer, [preloadedState], [enhancer])</p><ul><li>reducer：什么是 reducer</li></ul><blockquote><p>A reducer (also called a reducing function) is a function that accepts an accumulation and a value and returns a new accumulation. They are used to reduce a collection of values down to a single value.</p></blockquote><pre class=" language-javascript"><code class="language-javascript">type Reducer<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> A<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">:</span> S<span class="token punctuation">,</span> action<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> S</code></pre><p>有没有似成相识的感觉，为啥我喜欢问你 array.prototype.reduce?这是函数式编程的一个基础概念，在 redux 里，这个 accumulate state 其实就是 state object,这个过程简单来说就是，（之前状态，action）=&gt;(新的状态)，他们必须是纯函数，这样才能保证一些功能，比如热加载，时间漫游这类功能</p><ul><li><p>[preloadedState]<br>就是初始状态，现在大多使用 combineReducers 来生成它，你可以传入你 reducer 认识的任何数据（plain object）</p></li><li><p>[enhancer]<br>意思是字面的意思，就是 store 的 enhancer，你可以传入第三方中间件，比如 time travel, persistence 等，默认使用的是 applyMiddleware()</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">createStore</span><span class="token punctuation">(</span><span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>reducers<span class="token punctuation">,</span>  routing<span class="token punctuation">:</span> routerReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://redux.js.org/" target="_blank" rel="noopener">https://redux.js.org/</a></li><li><a href="https://cn.redux.js.org/" target="_blank" rel="noopener">https://cn.redux.js.org/</a></li><li>深入 react 技术栈</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react with webpack(六)</title>
      <link href="/2017/10/02/qian-duan/webpack-scaffold-6/"/>
      <url>/2017/10/02/qian-duan/webpack-scaffold-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="webpack4-图片，字体"><a href="#webpack4-图片，字体" class="headerlink" title="webpack4 图片，字体"></a>webpack4 图片，字体</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/hyyfrank/webpack4" target="_blank" rel="noopener">https://github.com/hyyfrank/webpack4</a> branch: feature/lesson7</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>我们需要做什么</p><ul><li><p>支持 jpeg, jpg,gif,png 等文件格式</p></li><li><p>图片处理成雪碧图</p></li><li><p>压缩图片</p></li><li><p>字体如何下载和处理</p></li></ul></li><li><p>需要什么 loader 和 plugin</p><ul><li><p><strong>loader</strong>:</p><ul><li><p>file-loader:可以解析文件中的 import<code>/</code>require()，转成 url，把文件打到 output 目录中</p></li><li><p>url-loader: 类似 file-loader,但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL</p></li><li><p>img-loader:图片最小化的 loader,它有个依赖叫 imagemin，一般会和上面两个 loader 一起做图片的压缩</p></li><li><p>svg-url-loader:svg 文件是 xml 字符串，使用 base-64 不是必须的，使用 utf-8 编码比 base64 有一些好处，比如编码后短一点，使用 gzip 压缩的时候效果好点，浏览器解析 utf-8 比 base64 快</p></li></ul></li></ul></li></ul><h2 id="第一步：先增加对图片的处理"><a href="#第一步：先增加对图片的处理" class="headerlink" title="第一步：先增加对图片的处理"></a><strong>第一步</strong>：先增加对图片的处理</h2><pre><code>{    test: /\.(jpe?g|png|gif)$/i,    use:[        {            loader: &quot;url-loader&quot;,            options:{                name: &quot;[name]-[hash:5].min.[ext]&quot;,                limit: 10000, // size &lt;= 20KB                publicPath: &quot;images/&quot;,                outputPath: &quot;images/&quot;            }        },    ]}</code></pre><h2 id="第二步：处理图片压缩"><a href="#第二步：处理图片压缩" class="headerlink" title="第二步：处理图片压缩"></a><strong>第二步</strong>：处理图片压缩</h2><p>这边对每一种格式都有一个 plugin，这些 plugin 都要 npm install 一下，然后具体的配置选项可以 github 上搜到，有图片优化需求的，要详细看一下各个选项</p><pre><code>{    test: /\.(jpe?g|png|gif)$/i,    use:[        {            loader: &quot;url-loader&quot;,            options:{                name: &quot;[name]-[hash:5].min.[ext]&quot;,                limit: 10000, // size &lt;= 20KB                publicPath: &quot;images/&quot;,                outputPath: &quot;images/&quot;            }        },    ]}</code></pre><p>可以执行 npm run dev 查看之前图片的大小和压缩后的大小，发现确实变小了</p><h2 id="第三步：生成雪碧图"><a href="#第三步：生成雪碧图" class="headerlink" title="第三步：生成雪碧图"></a><strong>第三步</strong>：生成雪碧图</h2><pre><code>{    loader:&#39;postcss-loader&#39;,    options: {        sourceMap: true,        config: {            path: __dirname + &#39;/postcss.config.js&#39;        },        plugins: [require(&quot;postcss-sprites&quot;)({            spritePath: &quot;./dist/images&quot;        })]    },},</code></pre><p>这里的 plugin 是为了生成雪碧图，效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/11577190-8efb3bbde7750c20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-03-15 at 11.23.08 PM.png"></p><h2 id="第四步：-字体处理"><a href="#第四步：-字体处理" class="headerlink" title="第四步： 字体处理"></a><strong>第四步</strong>： 字体处理</h2><ol><li>去 google font 下载个字体，如果翻不了墙，可以自己其他地方下一个，然后用在线字体转换器转换下，然后就能转出 ttf|otf|eot|woff 各种格式，这样本地就有字体文件了，然后解析的话，使用下面这个代码就可以</li></ol><pre><code>{    test: /.(ttf|otf|eot|svg|woff(2)?)(\?[a-z0-9]+)?$/,    exclude: /images/,  /* dont want svg images from image folder to be included */    use: [        {            loader: &#39;file-loader&#39;,            options: {                outputPath: &#39;fonts/&#39;,                name: &#39;[name][hash].[ext]&#39;,            },        },    ],}</code></pre><p>做完这个，就可以在 css 中包含自己的字体，自己可以命名下</p><pre><code>@font-face {  font-family: &quot;frankfont&quot;;  src: url(&quot;../fonts/RobotoCondensed-Regular.woff2&quot;) format(&quot;woff2&quot;),              url(&quot;../fonts/RobotoCondensed-Regular.woff&quot;) format(&quot;woff&quot;);}</code></pre><p>然后我们看一下使用的情况：</p><pre><code>    .hello {     font-family: frankfont Monaco Arial, Verdana, Tahoma, sans-serif;     font-size: 20px;     width: 300px;     font-weight: bold;     color: var(--color-black);     background: rgba(153, 221, 153, 0.8);    }</code></pre><p>具体的效果：</p><p>可以看到 hello css module 这句话，已经使用我们自己的字体了，图片压缩的效果和雪碧图生成效果如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/11577190-2f6d868cf74258f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-03-15 at 11.20.55 PM.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>OK，好了，大概该做的都做完了，这基本任务算是都能处理了，其实还有好多东西要做，有空会多写一些。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react with webpack(五)</title>
      <link href="/2017/10/02/qian-duan/webpack-scaffold-5/"/>
      <url>/2017/10/02/qian-duan/webpack-scaffold-5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="Webpack4-如何处理-css"><a href="#Webpack4-如何处理-css" class="headerlink" title="Webpack4 如何处理 css"></a>Webpack4 如何处理 css</h1><ul><li><a href="https://github.com/hyyfrank/webpack4" target="_blank" rel="noopener">github demo</a> branch: feature/lesson5</li></ul><h2 id="我们需要做什么"><a href="#我们需要做什么" class="headerlink" title="我们需要做什么"></a>我们需要做什么</h2><ul><li>支持 css 的处理</li><li>把 css 抽取成单独的 css 文件</li><li>支持 css module</li><li>支持 css next 等新特性</li><li>支持 css style lint 校验</li><li>减少无用的 css 代码</li><li>使用 post css 做些处理比如 autoprefix,css-next</li><li>最小化 css 文件<h2 id="需要什么-loader-和-plugin"><a href="#需要什么-loader-和-plugin" class="headerlink" title="需要什么 loader 和 plugin"></a>需要什么 loader 和 plugin</h2><blockquote><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS 文件！</p></blockquote></li><li><strong>loader</strong>:<ul><li>sass-loader: 简单说就是 sass 转换成 css</li><li>postcss-loader: postcss 很强大，可以这么简单理解下，css–&gt;ast–&gt;plugin–&gt;xxxx,大概就是，先把 css 转化为抽象语法树，然后使用 javascript 处理，然后厉害的就是，真的啥都有个插件，只有想不到!</li><li>css-loader:<strong>The <code>css-loader</code> interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code> and will resolve them.</strong>选项我们会用到 modules, localIdentName</li><li>style-loader:<strong>Adds CSS to the DOM by injecting a <code>&lt;style&gt;</code> tag</strong></li></ul></li><li><strong>plugin</strong>:<ul><li>mini-css-extract-plugin：抽取 css 成单独文件</li><li>purifycss-webpack： 删除没使用的 css 选择器</li><li>stylelint-webpack-plugin：对 css 做 lint</li><li>optimize-css-assets-webpack-plugin:webpack 在 build 的过程中优化和最小化 css，默认使用 cssnano 做预处理器，cssnano 也是个 postcss 的 plugin<br>好了，废话到此为止，上代码看下就都明了，为了让代码更清晰，我们把对 css 的处理单独拉出来，再通过 webpack-merge 合到一起，下面是 css 的处理代码：<br>抽取代码成单独文件，现在目测原来的 extract-text-webpack-plugin 还是能用的，如果是使用 webpack4 的话，也得更新 extract-text-webpack-plugin 的版本到^4.0.0-beta.0，下面注释掉的，大家可以加回来试试，因为 webpack4 推荐使用 mini-css-extract-plugin，所以我们就使用这个,而且 mini-css-extract-plugin 不支持 hmr,但是不是在开发环境，我们只放在生产环境，其实还是 ok 的。<br>第一步：<strong>support style-loader,css-loader,sass-loader</strong><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cssDevRules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'style-loader'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'css-loader?modules&amp;localIdentName=[name]_[local]_[hash:base64:5]'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'sass-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> cssProdRules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'css-loader?modules&amp;localIdentName=[name]_[local]_[hash:base64:5]'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'sass-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"is prod:"</span><span class="token operator">+</span>isProd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>          test<span class="token punctuation">:</span> <span class="token regex">/\.(css|sass|scss)$/</span><span class="token punctuation">,</span>          use<span class="token punctuation">:</span> isProd<span class="token operator">?</span> cssProdRules<span class="token punctuation">:</span>cssDevRules<span class="token punctuation">,</span>          exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="css支持"><a href="#css支持" class="headerlink" title="css支持"></a>css支持</h2>第二步：<strong>css-next /autoprefixer support</strong><br>加上 posts-loader 来支持 auto-prfix 自动增加，同时，为了支持 css-next 最新的特性，现在不需要单独加，看官方文档有个 postcss-preset-env，直接加了支持 autoprefixer,<a href="https://github.com/csstools/postcss-preset-env" target="_blank" rel="noopener">PostCSS Preset Env</a> 能把现代的 css 转化成大部分浏览器都能解析的样式，会根据浏览器的版本决定加什么样的 polyfill.<pre class=" language-shell"><code class="language-shell">npm install postcss-preset-env</code></pre>简单修改下 postcss.config.js<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"postcss-import"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>browsers<span class="token punctuation">:</span> <span class="token string">"last 2 versions"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>cssnano<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      config<span class="token punctuation">:</span> <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/postcss.config.js'</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ul></li></ul><h2 id="风格校验"><a href="#风格校验" class="headerlink" title="风格校验"></a>风格校验</h2><p>第三步：<strong>add style-lint support</strong><br>加 style-lint 来控制代码质量，当然我只是加上而已，具体规则要自己去定，或者你可以用标准的 stylelint-config-standard,对应的 plugin 是 stylelint-config-standard</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> StyleCssLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"stylelint-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> StyleLintPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StyleCssLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  configFile<span class="token punctuation">:</span> <span class="token string">".stylelintrc"</span><span class="token punctuation">,</span>  context<span class="token punctuation">:</span> <span class="token string">"src"</span><span class="token punctuation">,</span>  files<span class="token punctuation">:</span> <span class="token string">"**/*.scss"</span><span class="token punctuation">,</span>  failOnError<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  quiet<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>StyleLintPlugin<span class="token punctuation">,</span> MiniCssPlugin<span class="token punctuation">,</span> OptimizeCSSPlugin<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>当然也要加个.stylelintrc 文件,现在简单先用 stylelint-config-standard。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"stylelint-config-standard"</span><span class="token punctuation">}</span></code></pre><h2 id="移除冗余css"><a href="#移除冗余css" class="headerlink" title="移除冗余css"></a>移除冗余css</h2><p>第四步：<strong>remove unused css</strong><br>purifycss： 移除无用 css,有人使用 css tree shake 这种术语，anyway,感觉差不多</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PurifyCSSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"purifycss-webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> PurifyCssPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurifyCSSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  paths<span class="token punctuation">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  styleExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".css"</span><span class="token punctuation">,</span> <span class="token string">".scss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  purifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    whitelist<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"*purify*"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssPlugin<span class="token punctuation">,</span>  PurifyCssPlugin<span class="token punctuation">,</span>  StyleLintPlugin<span class="token punctuation">,</span>  OptimizeCSSPlugin  <span class="token comment" spellcheck="true">// new ExtractTextPlugin("styles.css"),</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="最小化CSS"><a href="#最小化CSS" class="headerlink" title="最小化CSS"></a>最小化CSS</h2><p>第五步：<strong>minimize css</strong><br>optimize-css-assets-webpack-plugin<br><strong>cssProcessor</strong>: 压缩和优化 CSS 的预处理器，现在默认是 cssnano.这是一个函数，接受一个 CSS 和 options 参数，返回 promise<br><strong>canPrint</strong>: {bool} 表示插件能够在 console 中打印信息，默认值是 true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCSSPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  cssProcessor<span class="token punctuation">:</span> cssnano<span class="token punctuation">,</span>  cssProcessorOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    discardComments<span class="token punctuation">:</span> <span class="token punctuation">{</span>      removeAll<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Run cssnano in safe mode to avoid</span>    <span class="token comment" spellcheck="true">// potentially unsafe transformations.</span>    safe<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  canPrint<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssPlugin<span class="token punctuation">,</span>  PurifyCssPlugin<span class="token punctuation">,</span>  StyleLintPlugin<span class="token punctuation">,</span>  OptimizeCSSPlugin  <span class="token comment" spellcheck="true">// new ExtractTextPlugin("styles.css"),</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>OK，好了，大概该做的都做完了，如果需要进一步处理，可以考虑 postcss 的一些 plugin，甚至可以自己写点 plugin,因为这是讲 webpack 不是 postcss，所以留给你自己探索吧～</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react with webpack(四)</title>
      <link href="/2017/10/02/qian-duan/webpack-scaffold-4/"/>
      <url>/2017/10/02/qian-duan/webpack-scaffold-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="webpack4-with-Babel-React-CSS-Module"><a href="#webpack4-with-Babel-React-CSS-Module" class="headerlink" title="webpack4 with Babel, React, CSS Module"></a>webpack4 with Babel, React, CSS Module</h1><ul><li>这节主要讲下 babel, react, css module 的简单引入，后续会根据需要再来修改，我们先做一个版本</li></ul><h2 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h2><ul><li><p>首先，看下需要装哪些包，都是干什么的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"react"</span><span class="token punctuation">:</span> <span class="token string">"^16.8.1"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//react package</span>  <span class="token string">"react-dom"</span><span class="token punctuation">:</span> <span class="token string">"^16.8.1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//the entry point to the DOM and server renderers for React</span>  <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.29.0"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// polyfill: you can use Promise, WeakMap,Array.from,Object.assign,Array.includes..</span>  <span class="token comment" spellcheck="true">// this is a polyfill, we need it to be a dependency</span>  <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.5"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Compile object rest and spread to ES5</span>  <span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">:</span> <span class="token string">"^7.3.2"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// re-use of Babel's injected helper code to save on codesize.</span>  <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.0"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//a library that contain's Babel modular runtime</span>  <span class="token comment" spellcheck="true">//helpers and a version of regenerator-runtime.</span>  <span class="token string">"@babel/runtime"</span><span class="token punctuation">:</span> <span class="token string">"^7.0.0-beta.55"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//babel comman line tool.</span>  <span class="token string">"@babel/cli"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.3"</span><span class="token punctuation">,</span>  <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.2"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//a smart preset that allows you to use the latest JavaScript without needing to        //micromanage which syntax transforms</span>  <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.3.1"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//@babel/plugin-syntax-jsx</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-jsx</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-display-name</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-jsx-self</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-jsx-source</span>  <span class="token string">"@babel/preset-react"</span><span class="token punctuation">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.0.5"</span><span class="token punctuation">,</span>  <span class="token string">"babel-plugin-transform-object-rest-spread"</span><span class="token punctuation">:</span> <span class="token string">"^6.26.0"</span><span class="token punctuation">,</span>  <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>  <span class="token string">"html-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.5.5"</span><span class="token punctuation">,</span>  <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.23.1"</span><span class="token punctuation">,</span>  <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0-beta.5"</span><span class="token punctuation">,</span>  <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.1"</span><span class="token punctuation">,</span>  <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.1"</span><span class="token punctuation">,</span>  <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^3.1.14"</span><span class="token punctuation">}</span></code></pre></li><li><p>这里要注意的是@babel/polyfill，这个要放在 dependencies 里边，因为是 polyfill,代码最后也是要在里边的，所以不能放在 devDependencies 里。接着看 babel 的配置文件。.babelrc</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token string">"current"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"@babel/preset-react"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"useBuiltIns"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="增加react支持"><a href="#增加react支持" class="headerlink" title="增加react支持"></a>增加react支持</h2></li><li><p>webpack.config.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这里要写，配置polyfill,也可以写在源码里</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>devtool<span class="token punctuation">:</span> <span class="token string">"cheap-module-source-map"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//production的source map</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//这里注意，要使用css module以及css module的格式</span>          loader<span class="token punctuation">:</span> <span class="token string">"css-loader?modules&amp;localIdentName=[name]_[hash:base64:5]"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//js/jsx使用babel-loader来处理</span>        loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">"html-loader"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模板</span>    filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>    hash<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//防止缓存</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>  extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>output<span class="token punctuation">:</span> <span class="token punctuation">{</span>  publicPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  filename<span class="token punctuation">:</span> <span class="token string">"[name]-bundle.js"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加这部分，当是开发环境的时候，再使用hmr和inline-source-map.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"development"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>baseConfig<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token string">"inline-source-map"</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>devServer <span class="token operator">=</span> <span class="token punctuation">{</span>  contentBase<span class="token punctuation">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>  hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> baseConfig<span class="token punctuation">;</span></code></pre><h2 id="第一个JSX"><a href="#第一个JSX" class="headerlink" title="第一个JSX"></a>第一个JSX</h2></li><li><p>然后写个简单的 jsx</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> style <span class="token keyword">from</span> <span class="token string">"../css/main.css"</span><span class="token punctuation">;</span><span class="token keyword">const</span> HomeComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//测试对象展开</span><span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 3, b: 4 }</span><span class="token comment" spellcheck="true">//测试array.from</span><span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试下promise</span><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试下symbol</span><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"symbol:"</span> <span class="token operator">+</span> sym<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello React16<span class="token number">.7</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>hello<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello CSS Module<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> HomeComponent<span class="token punctuation">;</span></code></pre><p>到这里就能让 react 的一个最简单的例子跑起来了,看下 index.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HomeComponent <span class="token keyword">from</span> <span class="token string">"./components/home"</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HomeComponent</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>package.json 里的 scripts 这样写</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"prod"</span><span class="token punctuation">:</span> <span class="token string">"webpack --mode production"</span><span class="token punctuation">,</span>  <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"NODE_ENV=development webpack-dev-server --mode development --open"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以看到，我们只是简单把一个react需要引入的东西引入进来，接下来，我们在这个最简单的例子上，逐步增加支持，让我们的应用更加professional</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react with webpack(三)</title>
      <link href="/2017/10/02/qian-duan/webpack-scaffold-3/"/>
      <url>/2017/10/02/qian-duan/webpack-scaffold-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="entry-配置模块的入口"><a href="#entry-配置模块的入口" class="headerlink" title="entry: 配置模块的入口"></a>entry: 配置模块的入口</h2><ul><li>webpack 寻找文件的时候会以 context 为基础，context 默认的是执行 webpack 的路径，比如我们项目就是默认根目录，当然也可以采取命令行去配置，比如 webpack –context<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirnaame<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>我们现在看到的 entry 里的路径也是相对于这个 context 的路径的，这个选项会影响后续配置的文件的路径</li><li>entry 可以配成三种方式 string, array, object,比如我们现在是一个页面就是‘./src/index.js’,多个页面的入口就是[‘./src/firstpage.js’,’./src/secondpage.js’]<ul><li>chunk: webpack 会为每个生成的 chunk 起名字，如果上面 entry 配了 string/array,则只有一个 chunk,如果配成 object,那么 chunk 会有多个，每个的名字就是 object 里的 key 的名字:</li></ul></li><li>配置动态 entry:<br>这个就是如果你有多个页面，要做多个入口，可以写成动态的，比如同步的直接返回一个 object，异步方式就返回一个 promise<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步</span>entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    first<span class="token punctuation">:</span> <span class="token string">"./src/firstpage"</span><span class="token punctuation">,</span>    second<span class="token punctuation">:</span> <span class="token string">"./src/sencordpage"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步</span>entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      first<span class="token punctuation">:</span> <span class="token string">"./src/firstpage"</span><span class="token punctuation">,</span>      second<span class="token punctuation">:</span> <span class="token string">"./src/secondpage"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="output-配置如何输出最终需要的代码"><a href="#output-配置如何输出最终需要的代码" class="headerlink" title="output:配置如何输出最终需要的代码"></a>output:配置如何输出最终需要的代码</h2></li><li>filename:如果只有一个，就是字符串，比如我们的 bundle.js,如果输出多个 chunk,就用通配符[name].js,<br>可以这样[id]-[name]-[hash]-[chunkhash].js,这几个都是他的内部变量，表示 chunk 的唯一标示，名称，唯一标示的 hash,chunk 内容的 hash</li><li>chunkFilename:比如 commonchunkplugin 输出的文件名，内置变量和上面一致</li><li>path：打包文件的输出目录</li><li>publicpath：这个就是静态资源如果放 cdn 上，需要去配的，可以自己写个域名放上去看看效果就知道了</li><li>crossOriginLoading：输出的时候如果需要异步加载一些资源，这个就是配置这些资源的获取，一般是通过 jsonp 来做的，会往 html 里插一个</li><li>libraryTarget &amp; library：配置以什么方式导出库和导出库的名称</li><li>libraryExport： 如果上面导出方式是 commons/commonjs2 的时候，你可以在这里导出你想导出的字模块<h2 id="module-配置处理模块的规则"><a href="#module-配置处理模块的规则" class="headerlink" title="module:配置处理模块的规则"></a>module:配置处理模块的规则</h2></li><li>rules 配置模块的读取和解析规则，就是配置 loader 的时候，一般是一个数组，然后每一部分配置怎么处理一个类型的文件，每一部分包括三个方面<ul><li>匹配到需要处理的文件，包括 test(支持数组), include, exclude</li><li>使用特定的 loader 来处理这些匹配到的文件 babel-loader, css-loader…loader 如果有多个参数需要传入，可以使用 object 来传递，经常看到的是 option:{xxxx}这样的</li><li>执行 loader 的顺序可以调整到最开始或者最后执行，通过 enforce 来配置，设为 pre/post</li></ul></li><li>noParse: 这个就是用来让 webpack 忽略一些文件，比如 jquery/chartjs,举个例子：<pre class=" language-javascript"><code class="language-javascript">noParse<span class="token punctuation">:</span><span class="token operator">|</span>jquery<span class="token regex">/chartjs/</span><span class="token comment" spellcheck="true">// 或者是函数形式</span>noParse<span class="token punctuation">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">/</span>jquery<span class="token regex">/chartjs/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li>parser: 支持 amd, commonjs,systemjs,es6,举个例子<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    moudle<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'babel:loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            parser<span class="token punctuation">:</span><span class="token punctuation">[</span>                amd<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                commonjs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                system<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                harmony<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                requireInclude<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用require.include</span>                requireEnsure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用require.ensure</span>                requireContext<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用require.context</span>                browserify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                requireJs<span class="token punctuation">:</span><span class="token boolean">false</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="resolve-webpack-如何寻找模块所对应的文件"><a href="#resolve-webpack-如何寻找模块所对应的文件" class="headerlink" title="resolve: webpack 如何寻找模块所对应的文件"></a>resolve: webpack 如何寻找模块所对应的文件</h2></li><li>alias: 就是别名，比如你 import 的时候，它会替换成真正的位置<pre class=" language-javascript"><code class="language-javascript">resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>  alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>    components<span class="token punctuation">:</span> <span class="token string">"./src/components"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>上面代码就会在你 import xxx from “components/xxx”的时候帮你替换成“./src/components/xxx”</li><li>mainFields: 有的模块提供不同环境的代码，这个字段可以指定优先使用哪个版本</li><li>extentions: 让 webpack 在寻找文件的时候，找这样扩展名的文件，你导入文件的时候不指定后缀名的话，会去看这个选项的配置，然后去寻找<pre><code>// 先去找ts文件，然后js,然后json文件extentsions:[&#39;.ts&#39;,&#39;.js&#39;,&#39;.json&#39;]</code></pre></li><li>modules: resolve.modules 配置 web pack 去哪些目录寻找第三方模块，默认指定 node_modules,一般我们应用会这样配<pre><code>modules:[&#39;./src/components&#39;,&#39;node_modules&#39;]</code></pre>这样配后，你以前可能需要 import xxx from ../../../components/xxx 就可以直接 import xxx from xxx;简洁了许多</li><li>enforeExtention: 如果配成 true,那么你 import 语句就必须加后缀名，否则会找不到<h2 id="plugins-配置扩展插件"><a href="#plugins-配置扩展插件" class="headerlink" title="plugins:配置扩展插件"></a>plugins:配置扩展插件</h2></li><li>我们项目里用到了一些，你也可以看到，其实引入都是大同小异，主要是要搞清楚这里面的具体的配置项<ul><li>dev-server:配置 dev-server<ul><li>hot: 我们在配置 hot module replacement 的时候会配的</li><li>inline： 一般使用这个模式，打开之后，webpack 通过代理客户端控制模块替换和刷新，如果关闭，那它文件变化后，会通过 iframe 的方式去运行，要到 localhost:8080/webpack-dev-server 看效果</li><li>还有一些配置项，参考文档，比如 historyApiFallback, contentBase ,headers ,host, port, allowHosts ,disableHostCheck, https,clientLogLevel,compress,open 这些都可以去看看，经常涉及到</li></ul></li><li>others:其他配置项，配置文件不止可以返回 object,也可以返回其他形式<ul><li>target: 针对不同的环境，比如 web, node,async-node,webworker,electron-main,electron-renderer</li><li>Devtool: 配置 webpack 如何生成 sourcemap</li><li>watch: 配置文件更新监听</li><li>external：有些第三方库，这些不需要 webpack 打包，比如 jquery</li><li>ResolveLoader: 告诉 webpack 如何发现 loader</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react with webpack(二）</title>
      <link href="/2017/10/01/qian-duan/webpack-scaffold-2/"/>
      <url>/2017/10/01/qian-duan/webpack-scaffold-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h2 id="version-in-package-json"><a href="#version-in-package-json" class="headerlink" title="version in package.json"></a>version in package.json</h2><ol><li><p>package.json 里的^和~有啥区别</p><ul><li>这个其实就是说明你项目中可以用哪个版本的软件，例如：3.4.5 类似 MAJOR.MINOR.PATCH 这种格式，这个叫 sematic versioning, 官网地址(<a href="https://semver.org/)。" target="_blank" rel="noopener">https://semver.org/)。</a><ul><li>MAJOR: 引入了不向后兼容的 API</li><li>MINOR:引入了向后兼容的 API.</li><li>PATCH:修 bug 的版本</li></ul></li><li>举个例子，一般发布 API 版本从 1.0.0，修了四个 bug,变成 1.0.4，引入新的 API,但是这些 API 向后兼容，那就变成 1.1.0，再修两个 bug,就变成 1.1.2，如果新的版本加入了新 API 是不向后兼容的，可能会破坏依赖，这种版本就是 2.0.0，以此类推</li><li>package.json 的情况是，~3.4.5 就是指 3.4.x 这样的版本，但是不超过 3.5.0， ^3.4.5 的意思就是 3.x.x 都是，但是低于 4.0.0 的版本。这样说就好理解了(具体看我上面的提供的链接)。</li><li>我们常见的 npm install antd –save 通常你在 package.json 看到的是^3.13.0 就是你可以使用 3.x.x 的版本但低于 4.0.0.当然有规则就有例外，如果是 0 开头的，有些许不同，简单讲，可以将^理解成~就成了，具体官方网页瞄一眼就明白了。</li><li>再说 hot replacement module(HRM)之前，需要了解几个东西，我们在上次的例子里来继续做：<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2>html-webpack-plugin: 这个 plugin 可以帮我们生成 html 文件，比如如果不使用他，你打包了，js 都到 dist 目录下(官方喜欢用 dist，我们就把 build 改成 dist),那你的 html 是不是还要自己手动引用这个新生成的地址，怎么自动化也帮我们把 html 生成并且把生成的 dist 目录下的 js 也引用进来呢，这个 plugin 就做这个事情，代码如下：<pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//模板,可以指定模板，但是要指定loader,这里我们用html-loader</span>  template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出文件的文件名字，默认就是index.html,路径是相对于webpackConfig.output.path路径</span>  filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//防止缓存,也就是生成的时候引用的时候，会有一个参数，这样就每次都去加载这个js，浏览器认为这是一个新的文件，有的人会做增量更新，其实道理差不多，就是用新的名字，让浏览器强制加载新的文件</span>  hash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//压缩的选项，字面意思，不知道的话，可以看下官网</span>  minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeRedundantAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        useShortDoctype<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>    viewport<span class="token punctuation">:</span> <span class="token string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span><span class="token punctuation">,</span>    <span class="token string">"theme-color"</span><span class="token punctuation">:</span> <span class="token string">"#4285f4"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>生成了 html 长这样,第一图是压缩的，第二图是 format 之后，因为我们制定了压缩，所以生成第一图这样的代码，这里要注意 webpack.config.js 里的 publicpath,如果指定，那么，生成的 js 的地址会变成 publicpath/bundle.js?71ac66103d2a 这样的引用</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span>UTF-8</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>viewport</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span>X-UA-Compatible</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>viewport</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1,shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>theme-color</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>#4285f4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>HTML WEBPACK PLUGIN TEMPLATE.   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>bundle.js?71ac66103d2a01102753</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h2><p>我们之前有一个删除目录的npm包，webpack里也有相应的plugin可以做这个事情，代码如下：</p><pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="css-plugin"><a href="#css-plugin" class="headerlink" title="css plugin"></a>css plugin</h2><p>关于 css, 本来想使用 mini-css-extract-plugin，但是这个 plugin 目前不支持 HRM,所以用老的就行</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>然后要配置 webpack-dev-server 和 HotModuleReplacementPlugin</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Dev_server_plugin 在 webpack 里这样配：</p><pre class=" language-javascript"><code class="language-javascript">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>      contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>      hot<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="final-package-json"><a href="#final-package-json" class="headerlink" title="final package.json"></a>final package.json</h2><p>所有安装的 plugin 都需要 cnpm install,package.json 如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"repository"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"git+https://github.com/hyyfrank/webpack4.git"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"bugs"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/hyyfrank/webpack4/issues"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack --watch"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"homepage"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/hyyfrank/webpack4#readme"</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.29.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.1"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.5.5"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0-beta.5"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.23.1"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.1"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^3.1.14"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="final-webpack-config-js"><a href="#final-webpack-config-js" class="headerlink" title="final webpack.config.js"></a>final webpack.config.js</h2><p>webpack.config.js 最后长这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">"./src/index.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">"inline-source-map"</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模板</span>      filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>      hash<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//防止缓存</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    publicPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">"[name]-bundle.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h2><p>打开浏览器的inspector,到console面板里，看到有个字写[WDS] Hot Module Replacement enabled.说明 hrm 是好的，你修改下 JS 会发现立马自己更新。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react with webpack(一)</title>
      <link href="/2017/09/28/qian-duan/webpack-scaffold-1/"/>
      <url>/2017/09/28/qian-duan/webpack-scaffold-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h2 id="webpack-scaffold"><a href="#webpack-scaffold" class="headerlink" title="webpack scaffold"></a>webpack scaffold</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>第一：开发环境<br>使用 vscode, <a href="https://github.com/hyyfrank/react_with_webpack" target="_blank" rel="noopener">github</a> 概念啥的很多地方都讲过了，这里水一下，请看<a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">文档</a> OK, 接着开始讲怎么用，一般项目需要的功能，我们一个个做,先做个例子，看看打包大概流程是怎么样的，不 bb.</p></li><li><p>先用 npm 初始化项目，当然用 yarn 也行，执行 npm -init -y 就生成 package.json 文件了(最好换 cnpm 稍微快点)</p></li><li><p>先去 vscode 的 plugin 下一个 html boilerplate 然后写 html 就舒服了，先写个 html,这时候只要简单建个文件输入 html:5 回车，就得到一个简单的 html5 文件了</p></li><li><p>简单加个 css 文件和 js 文件，那三剑客就齐了，这也是最网页最简单的样子了</p><pre class=" language-html"><code class="language-html">    <span class="token doctype">&lt;!DOCTYPE html></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello Webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Say hello to webpack4!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h3><ol><li>为了简单看到 html 网页的效果，我们装个库：cnpm install http-server -g</li><li>我要用 webpack 自然得装下，cnpm install webpack -g</li><li>启动网页，用我们刚才得 http-server: http-server -p 3000, 访问 <a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a> 就能看到简单页面</li></ol><h3 id="webpack入坑"><a href="#webpack入坑" class="headerlink" title="webpack入坑"></a>webpack入坑</h3><ul><li><p>简单网页打完收工。接着就是来使用 webpack 来打包和混淆了 js 了。</p><ol><li>先简单试一下：./node_modules/webpack/bin/webpack.js ./main.js bundle.js<br>然后你去把 html 里的 js 的 src 改成 bundle.js，打开网页看下，也是好的，说明 webpack 已经把 main.js 打包成 bundle.js 了，你可以去看下里边代码长什么样，有个了解</li><li>当然，我不能每次都自己动手去改这个 html 和输入命令吧，所以我们 webpack 提供了配置文件的方式来让你写，结合 package.json 里的 scripts 部分，可以让我们加命令，这样就不会敲命令敲到手软了</li><li>开始正式打包<ul><li>web pack.config.js 长这样：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>   entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>     app<span class="token punctuation">:</span> <span class="token string">"./src/main.js"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   output<span class="token punctuation">:</span> <span class="token punctuation">{</span>     publicPath<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/build/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// js引用路径或者CDN地址</span>     path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包文件的输出目录</span>     filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>结果<br>和我们刚才命令行差不多，不过这次用配置文件的方式展示出来,啥意思呢，就是上面注释那意思。什么，你不知道 entry 和 output 的意思，拜托，稍微看下文档，中文的也行啊，起码有个大概了解【参考文章开始的链接】，写完这个，直接在当前目录下打 webpack 命令搞定！然后我们把命令放在 package.json 里的 scripts 部分，以后直接 npm run build 就跑这个构建命令，就方便了，如下：(这里 webpack 是全局装的，方便点)</li></ul></li></ol><ul><li><p>把命令放进去package.json</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span></code></pre></li><li><p>OK,那我每次执行完构建，会生成一个 build 目录，我不想每次自己手动去删掉，所以，我们可以构建之前先删除这个文件，然后再开始构建，简单装个酷，cnpm install rmdir-cli,然后我们的 package.json 里的 build 脚本变成：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"rmdir-cli build &amp;&amp; webpack --watch"</span></code></pre><p>稍微调整下文件结构，加个 src 目录来放 js, 只需要修改下 webpack.config.js 里的 entry 的路径就可以了,当然了你 html 如果要应用到文件，js 的 src 要改成从 build 中去取就行了，详细代码看我的 github repo,watch 就是为了你能监听文件的变化，修改文件 webpack 重新编译你也能看到</p></li><li><p>各种规范打包出来的样子<br>因为支持 webpack 支持 ES6、CommonJs 和 AMD 规范，所以都可以在 js 里去写，举个栗子，加上 es6：</p></li></ul><p>main.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> addtwo <span class="token keyword">from</span> <span class="token string">"./add"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"javascript say hello."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addtwo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>add.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a+b ="</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>重新构建下，跑一下，看看打开 html 里的 chrome dev tool,看看 a+b=3 有没有打出来。搞定！</p><p>看一眼打完包是什么样子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">:</span> n<span class="token punctuation">,</span>    l<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> o<span class="token punctuation">,</span> o<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>m <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>c <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    r<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token string">"undefined"</span> <span class="token operator">!=</span> <span class="token keyword">typeof</span> Symbol <span class="token operator">&amp;&amp;</span>      Symbol<span class="token punctuation">.</span>toStringTag <span class="token operator">&amp;&amp;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token string">"Module"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;</span> t <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&amp;</span> t <span class="token operator">&amp;&amp;</span> <span class="token string">"object"</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> e <span class="token operator">&amp;&amp;</span> e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>__esModule<span class="token punctuation">)</span> <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> e      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token number">2</span> <span class="token operator">&amp;</span> t <span class="token operator">&amp;&amp;</span> <span class="token string">"string"</span> <span class="token operator">!=</span> <span class="token keyword">typeof</span> e<span class="token punctuation">)</span>    <span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> o <span class="token keyword">in</span> e<span class="token punctuation">)</span>        r<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>          n<span class="token punctuation">,</span>          o<span class="token punctuation">,</span>          <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> t <span class="token operator">=</span>      e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>__esModule        <span class="token operator">?</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>o <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token string">"/Users/hyy/github/webpack4/build/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">"use strict"</span><span class="token punctuation">;</span>  r<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"javascript say hello."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a+b ="</span><span class="token punctuation">,</span> e <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> e <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>今天困了，先写到这吧，不知道说啥了，扯个淡收场吧！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成神之路</title>
      <link href="/2015/01/02/wu-nao-xiao-shuo/cheng-shen-zhi-lu/"/>
      <url>/2015/01/02/wu-nao-xiao-shuo/cheng-shen-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="魔界篇"><a href="#魔界篇" class="headerlink" title="魔界篇"></a>魔界篇</h1><h2 id="第一章：初入魔界"><a href="#第一章：初入魔界" class="headerlink" title="第一章：初入魔界"></a>第一章：初入魔界</h2><p>系统检测到人类中有人怨念值超过警戒线，现在开启魔界之路，匹配到该人类公成道，传输魔界中…1%，5%，…..100%，传输完毕。我怎么觉得凉风阵阵的，我在哪？这是公成道第一个念头，伴随着阵阵头痛，公成道张开眼睛，发现天空乌云密布伴随着闪电，而自己好像身处一个半椭圆的，类似锅的东西里边。此时耳边传来一阵山呼”魔神万岁“，公成道艰难翻了个身，不禁倒吸了一口凉气，下方十几米处跪着一群生物，虔诚的朝着自己的方向跪拜，而自己正在一个很高的柱子上面，我到底是在哪？</p><p>　　还没来得及想其他问题，突然一阵震动，公成道只觉得自己身下石柱剧烈颤动，并缓慢下降，过了大概1分钟，石柱停止了震动，公成道发现现在有一群生物围着自己，这些生物有的人面虎身，有的看起来是人身，不过却有两个头，有体型庞大的鸟，还有龙头人身的生物，还有三只脚的人。公成道还没来得及思考便被那龙首人身的生物抱了起来，这才发现自己竟然是个婴儿。接着听着他们稀里哗啦说了一堆东西就散了，然后自己被龙首人身的生物抱走了。</p><p>　　约莫过了半个时辰，公成道被安置在了一个石洞中平台上，这石洞通风透气，光线充足，洞内各种花草郁郁葱葱，与石洞浑然一体，甚是美丽，想来桃花源记中的桃花洞也不过如此吧，正当公成道胡思乱想之时，旁边的龙头人身生物背着一袋子东西放在了平台上就转身走了，公成道此时也已经是饥肠辘辘，只好爬过去看看袋里是什么，扒拉着袋子，都是一些杨梅，水果之类的，公成道此时也顾不得那么多遍吃了起来，吃完头部的晕眩又再次袭来，于是又浑浑噩噩的睡了过去。</p><p>　　就这样浑浑噩噩的日子过去了4年，公成道终于学会走路了，第一个事情便是看看这里到底是什么地方，语言上听起来有点类似南方的某种方言，通过四年的摸索，公成道也大体都能听明白是什么意思，但这地方到底是哪里他还是有些纳闷，他决定四处走走看看这里到底是什么地方。他发现他所在的山洞似乎里边还另有洞天，于是摸着山洞小道向内走去，大约过了半个时辰，推开一层类似荆棘的帘子，往前迈开步子的公成道一不小心滑了一跤，跌入了一个滑道之中，滑道不是很陡，公成道想抓点什么东西稳一下，但是旁边都太滑了，什么都抓不住，于是只能跟着滑下去，不知道向下滑了多久，终于滑道到了尽头，还好没什么危险，公成道也是一身冷汗，他站起来看到前面有点光亮，于是顺着光亮往里走去，道路越来越狭窄，然后到了光亮的地方，穿过去之后，眼前豁然开朗。</p><p>　　这里的光不像太阳那么强烈，泛着柔和的白光，一切都清晰映入眼帘。最下面有一片平原，远处有高山，平原最左边似乎有溪流，平原中间有些湖泊，平原右侧山脉起伏，眼前近处有个类似村庄的存在，似乎热闹非凡，各色生物行走期间，在村庄旁边围绕着一堆建筑，看起来是居住的房屋，但是看大小有的比人类的建筑要大上十倍不止，有的是正常大小，都是依山错落而建，山上有溪流从上而下流下，不同的建筑物有的有类似桥的建筑，有的上方只是一些藤条，建筑几乎都有植物花草覆盖，而且似乎修整过，有一种整齐的美感。山脚建筑物前边是一片良田，有些生物劳作其中，有些生物则是往里边不停的吐水，对于公成道来说，这一切都太新奇了。</p>]]></content>
      
      
      <categories>
          
          <category> 无脑小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
