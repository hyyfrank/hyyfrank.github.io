<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on H&amp;W</title>
    <link>http://hyyfrank.github.io/post/</link>
    <description>Recent content in Posts on H&amp;W</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Aug 2022 11:53:41 +0800</lastBuildDate><atom:link href="http://hyyfrank.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[跬步2] debounce with promise </title>
      <link>http://hyyfrank.github.io/post/frontend/%E8%B7%AC%E6%AD%A5-2/</link>
      <pubDate>Thu, 11 Aug 2022 11:53:41 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/%E8%B7%AC%E6%AD%A5-2/</guid>
      <description>先写个debounce const _debounce = (fn, delay, immediate=false) =&amp;gt; { let timer; return (...args) =&amp;gt; { const callNow = immediate &amp;amp;&amp;amp; !timer; clearTimeout(timer); timer = setTimeout(() =&amp;gt; { timer = null; if (!immediate) fn(...args); }, delay); if (callNow) fn(...args); }; }; debounce with promise 如果我在拖动鼠标的时候，触发deb</description>
    </item>
    
    <item>
      <title>[跬步1] debounce, throttle </title>
      <link>http://hyyfrank.github.io/post/frontend/%E8%B7%AC%E6%AD%A5-1/</link>
      <pubDate>Wed, 10 Aug 2022 11:53:41 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/%E8%B7%AC%E6%AD%A5-1/</guid>
      <description>debounce &amp;amp; throttle lodash API _.debounce(func, [wait=0], [options={}]) func (Function): 要防抖动的函数。 [wait=0] (number): 需要延迟的毫秒数。 [options={}] (Object): 选项对象。 [options.leading=false] (boolean): 指定在延迟开始前调用，默认false。 [options.maxWait] (number): 设置 func 允许被延迟的最大</description>
    </item>
    
    <item>
      <title>FFMPEG</title>
      <link>http://hyyfrank.github.io/post/algorithms/ffmpeg/</link>
      <pubDate>Fri, 04 Mar 2022 10:36:30 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/algorithms/ffmpeg/</guid>
      <description>基本组成 AVFormat: 包含绝大多数的媒体封装格式，封装和解封装（编译enable） AVCodec: 包含绝大多数的编解码格式（第三方要另外安装，比如x264, libfd</description>
    </item>
    
    <item>
      <title>Compile openssl from source</title>
      <link>http://hyyfrank.github.io/post/linux/play-with-openssl/</link>
      <pubDate>Tue, 07 Sep 2021 18:29:48 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/linux/play-with-openssl/</guid>
      <description>更新并替换原有openssl版本 Remove Current Version of Openssl 第一，先删除现在的openssl版本 sudo apt-get remove openssl sudo apt-get remove --auto-remove openssl sudo apt-get purge openssl Download package and compile from source 第二，从源码安装 ./config --prefix=/opt/software/ssl --openssldir=/opt/software/ssl shared</description>
    </item>
    
    <item>
      <title>Flask With Mysql(二)</title>
      <link>http://hyyfrank.github.io/post/python/playing-with-flask-2/</link>
      <pubDate>Fri, 06 Aug 2021 23:36:30 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/python/playing-with-flask-2/</guid>
      <description>这是一个flask基础框架，由于python之前只是写一些零散的脚本 刚好使用python构建一个项目脚手架 1. jwt token的流程 short live token to make application more</description>
    </item>
    
    <item>
      <title>Flask With Mysql(一)</title>
      <link>http://hyyfrank.github.io/post/python/playing-with-flask-1/</link>
      <pubDate>Tue, 03 Aug 2021 20:36:30 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/python/playing-with-flask-1/</guid>
      <description>这是一个flask基础框架，由于python之前只是写一些零散的脚本 刚好使用python构建一个项目脚手架 1. 需要哪些功能 flask blueprint cros output json format easy debugging health page</description>
    </item>
    
    <item>
      <title>[Emacs] Play With Emacs(一)</title>
      <link>http://hyyfrank.github.io/post/emacs/play-with-emacs-1/</link>
      <pubDate>Wed, 02 Sep 2020 23:03:48 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/emacs/play-with-emacs-1/</guid>
      <description>emacs循序渐进 基本设置如下 emacs setting org mode除了可以写备忘录，TODO,还可以做其他的 org文件来管理emacs的配置 org文件可以用rev</description>
    </item>
    
    <item>
      <title>[Autodesk] Play With bloomfilter</title>
      <link>http://hyyfrank.github.io/post/redis/play-with-bloomfilter/</link>
      <pubDate>Fri, 07 Aug 2020 11:38:41 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/redis/play-with-bloomfilter/</guid>
      <description>BloomFilter概念 布隆过滤器的原理是，当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检</description>
    </item>
    
    <item>
      <title>[Autodesk] Play With Shell</title>
      <link>http://hyyfrank.github.io/post/linux/play-with-shell/</link>
      <pubDate>Sun, 07 Jun 2020 11:33:39 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/linux/play-with-shell/</guid>
      <description>shell逐行处理两种常用速度较快的方法 使用文件描述符，把标准输出关联到文件描述符4上面，然后重定向标准输出到$OUTFILE,然后回复标准</description>
    </item>
    
    <item>
      <title>[Autodesk] How to create https self-signed certificate</title>
      <link>http://hyyfrank.github.io/post/ops/https-self-sign-certificate/</link>
      <pubDate>Tue, 07 Apr 2020 12:20:45 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/ops/https-self-sign-certificate/</guid>
      <description>动机 公司内网想做一个小型的https，不想申请https证书，想自己做自验证的证书 关注点 https的握手流程 浏览器尝试连接网站 https://demowebsite.com. demowebsite.com server 会把证书</description>
    </item>
    
    <item>
      <title>[Docker] container研究</title>
      <link>http://hyyfrank.github.io/post/docker/docker/</link>
      <pubDate>Mon, 02 Sep 2019 23:03:48 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/docker/docker/</guid>
      <description>PPT 组内分享的PPT conttainer namespace linux control group UnionFS veth 容器应该具备哪些东西 隔离文件系统： 通过 chroot 命令切换根目录的挂载点 隔离网络： 为了分布式环境下的通讯： 要有独立的 I</description>
    </item>
    
    <item>
      <title>React With Webpack(八)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-8/</link>
      <pubDate>Wed, 21 Aug 2019 20:11:44 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-8/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>React With Webpack(七)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-7/</link>
      <pubDate>Mon, 19 Aug 2019 20:11:44 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-7/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>React With Webpack(六)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-6/</link>
      <pubDate>Sun, 18 Aug 2019 09:11:39 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-6/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>React With Webpack(五)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-5/</link>
      <pubDate>Thu, 15 Aug 2019 11:11:36 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-5/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>React With Webpack(四)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-4/</link>
      <pubDate>Tue, 13 Aug 2019 11:11:33 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-4/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>React With Webpack(三)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-3/</link>
      <pubDate>Sat, 10 Aug 2019 11:11:30 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-3/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>React With Webpack(二)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-2/</link>
      <pubDate>Thu, 08 Aug 2019 11:07:49 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-2/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>React With Webpack(一)</title>
      <link>http://hyyfrank.github.io/post/frontend/react-with-webpack-1/</link>
      <pubDate>Tue, 06 Aug 2019 23:36:30 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/frontend/react-with-webpack-1/</guid>
      <description>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架 如何把最新流行的技术整合在一起,涉及react,redux,web</description>
    </item>
    
    <item>
      <title>Java With Spring (四)</title>
      <link>http://hyyfrank.github.io/post/spring/java-with-spring-4/</link>
      <pubDate>Sat, 04 Aug 2018 09:33:39 +0800</pubDate>
      
      <guid>http://hyyfrank.github.io/post/spring/java-with-spring-4/</guid>
      <description>增加多个环境支持 目录结构如下： └── resources ├── application-dev.properties ├── application-pre-prod.properties ├── application-prod.properties ├── application-staging.properties ├── application-test.properties ├── application.properties ├── customize.properties 对于每个配置文件会包含热加载，log, database, mybatis, redis, k</description>
    </item>
    
  </channel>
</rss>
