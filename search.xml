<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>how to devOps - Basic</title>
      <link href="/2020/10/03/ruan-jian-gong-ju/devops/devops-de-zuo-fa/"/>
      <url>/2020/10/03/ruan-jian-gong-ju/devops/devops-de-zuo-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、持续集成介绍"><a href="#一、持续集成介绍" class="headerlink" title="一、持续集成介绍"></a>一、持续集成介绍</h2><blockquote><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler</p></blockquote><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><ul><li><strong>持续集成</strong>(<code>Continuous Integration</code>)：<strong>频繁地(一天多次)将代码集成到主干。</strong>让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</li><li><strong>持续交付</strong>(<code>Continuous Delivery</code>)：<strong>频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</li><li><strong>持续部署</strong>(<code>continuous Deployment</code>)：<strong>代码通过评审以后，自动部署到生产环境。</strong>是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</li></ul><h3 id="2-持续集成的好处"><a href="#2-持续集成的好处" class="headerlink" title="2 持续集成的好处"></a>2 持续集成的好处</h3><ul><li><strong>自动化构建且状态对每个人可见</strong>。可以使用<code>Maven</code>、<code>Gradle</code>等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。</li><li><strong>解放了重复性劳动。</strong>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</li><li><strong>更快地发现和修复问题。</strong>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</li><li><strong>更快的交付成果。</strong>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</li><li><strong>减少手工的错误。</strong>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</li><li><strong>减少了等待时间。</strong>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</li><li><strong>更高的产品质量。</strong>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</li></ul><h3 id="3-常用持续集成工具"><a href="#3-常用持续集成工具" class="headerlink" title="3 常用持续集成工具"></a>3 常用持续集成工具</h3><ul><li><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a></li><li><a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">TeamCity</a></li></ul><h3 id="4-企业怎么做devops"><a href="#4-企业怎么做devops" class="headerlink" title="4 企业怎么做devops"></a>4 企业怎么做devops</h3><ul><li>TODO</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to add redux</title>
      <link href="/2020/10/03/qian-duan/webpack-scaffold-7/"/>
      <url>/2020/10/03/qian-duan/webpack-scaffold-7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="增加-react—redux-支持"><a href="#增加-react—redux-支持" class="headerlink" title="增加 react—redux 支持"></a>增加 react—redux 支持</h1><h2 id="add-redux-amp-amp-react-redux-support"><a href="#add-redux-amp-amp-react-redux-support" class="headerlink" title="add redux &amp;&amp; react-redux support"></a>add redux &amp;&amp; react-redux support</h2><pre class=" language-shell"><code class="language-shell">npm install --save redux react-redux</code></pre><h2 id="代码上的改动"><a href="#代码上的改动" class="headerlink" title="代码上的改动"></a>代码上的改动</h2><p><img src="/images/1.png" alt="react_redux"><br><img src="/images/2.png" alt="react_redux"></p><h2 id="分析下这个代码改动"><a href="#分析下这个代码改动" class="headerlink" title="分析下这个代码改动"></a>分析下这个代码改动</h2><ul><li>原来的 HomeComponent 变成了 App,并且 App 组件有个 connect 方法，方法有两个参数 mapStateToProps，mapDispatchToProps</li><li>Provider 使组件层级中的 connect()方法都能够获得 Redux store。正常情况下，你的根组件应该嵌套在 Provider 中才能使用上面那条说的 connect()方法</li></ul><h3 id="具体说下这些函数的功能"><a href="#具体说下这些函数的功能" class="headerlink" title="具体说下这些函数的功能"></a>具体说下这些函数的功能</h3><ol><li>mapStateToProps 是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state 对象到（UI 组件的）props 对象的映射关系</li><li>mapDispatchToProps 是 connect 函数的第二个参数，用来建立 UI 组件的参数到 store.dispatch 方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。</li><li>React-Redux 提供 connect 方法，用于从 UI 组件生成容器组件</li><li>React-Redux 提供 Provider 组件，可以让容器组件拿到 state。</li></ol><p>具体如何调用，找了张图，画的还可以：<br><img src="/images/react-redux-workflow.png" alt="react-redux-workflow.png"></p><h3 id="creatstore"><a href="#creatstore" class="headerlink" title="creatstore"></a>creatstore</h3><p>方法：createStore(reducer, [preloadedState], [enhancer])</p><ul><li>reducer：什么是 reducer</li></ul><blockquote><p>A reducer (also called a reducing function) is a function that accepts an accumulation and a value and returns a new accumulation. They are used to reduce a collection of values down to a single value.</p></blockquote><pre class=" language-javascript"><code class="language-javascript">type Reducer<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> A<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">:</span> S<span class="token punctuation">,</span> action<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> S</code></pre><p>有没有似成相识的感觉，为啥我喜欢问你 array.prototype.reduce?这是函数式编程的一个基础概念，在 redux 里，这个 accumulate state 其实就是 state object,这个过程简单来说就是，（之前状态，action）=&gt;(新的状态)，他们必须是纯函数，这样才能保证一些功能，比如热加载，时间漫游这类功能</p><ul><li><p>[preloadedState]<br>就是初始状态，现在大多使用 combineReducers 来生成它，你可以传入你 reducer 认识的任何数据（plain object）</p></li><li><p>[enhancer]<br>意思是字面的意思，就是 store 的 enhancer，你可以传入第三方中间件，比如 time travel, persistence 等，默认使用的是 applyMiddleware()</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">createStore</span><span class="token punctuation">(</span><span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>reducers<span class="token punctuation">,</span>  routing<span class="token punctuation">:</span> routerReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://redux.js.org/" target="_blank" rel="noopener">https://redux.js.org/</a></li><li><a href="https://cn.redux.js.org/" target="_blank" rel="noopener">https://cn.redux.js.org/</a></li><li>深入 react 技术栈</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Most Used Command</title>
      <link href="/2020/10/03/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/"/>
      <url>/2020/10/03/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="1-submit-feature-branch-code"><a href="#1-submit-feature-branch-code" class="headerlink" title="1 submit feature branch code"></a>1 submit feature branch code</h3><pre class=" language-javascript"><code class="language-javascript">git checkout master git pull origin mastergit pull origin feature<span class="token operator">/</span>mybranchgit rebase master<span class="token operator">...</span><span class="token operator">...</span>git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">"JIRA-1: XXXXXX reviewer:xxxxx"</span>git push origin feature<span class="token operator">/</span>mybranchgit checkout mastergit merge feature<span class="token operator">/</span>mybranchgit tag <span class="token string">"your tag format"</span>git push origin master</code></pre><h3 id="2-add-delete-branch"><a href="#2-add-delete-branch" class="headerlink" title="2 add delete branch"></a>2 add delete branch</h3><h3 id="3-remove-cache-and-make-gitignore-work"><a href="#3-remove-cache-and-make-gitignore-work" class="headerlink" title="3 remove cache and make gitignore work"></a>3 remove cache and make gitignore work</h3><h3 id="4-how-to-use-rebase-to-merge-commit-together"><a href="#4-how-to-use-rebase-to-merge-commit-together" class="headerlink" title="4 how to use rebase to merge commit together"></a>4 how to use rebase to merge commit together</h3><h3 id="5-how-to-reset-to-a-certain-commit"><a href="#5-how-to-reset-to-a-certain-commit" class="headerlink" title="5 how to reset to a certain commit"></a>5 how to reset to a certain commit</h3><h3 id="6-how-to-add-security-and-code-check-in-your-code"><a href="#6-how-to-add-security-and-code-check-in-your-code" class="headerlink" title="6 how to add security and code check in your code"></a>6 how to add security and code check in your code</h3><h3 id="7-how-to-manage-your-code-with-agile-method"><a href="#7-how-to-manage-your-code-with-agile-method" class="headerlink" title="7 how to manage your code with agile method"></a>7 how to manage your code with agile method</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/10/03/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/"/>
      <url>/2020/10/03/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how webpack handle font and image</title>
      <link href="/2020/10/02/qian-duan/webpack-scaffold-6/"/>
      <url>/2020/10/02/qian-duan/webpack-scaffold-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="webpack4-图片，字体"><a href="#webpack4-图片，字体" class="headerlink" title="webpack4 图片，字体"></a>webpack4 图片，字体</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/hyyfrank/webpack4" target="_blank" rel="noopener">https://github.com/hyyfrank/webpack4</a> branch: feature/lesson7</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>我们需要做什么</p><ul><li><p>支持 jpeg, jpg,gif,png 等文件格式</p></li><li><p>图片处理成雪碧图</p></li><li><p>压缩图片</p></li><li><p>字体如何下载和处理</p></li></ul></li><li><p>需要什么 loader 和 plugin</p><ul><li><p><strong>loader</strong>:</p><ul><li><p>file-loader:可以解析文件中的 import<code>/</code>require()，转成 url，把文件打到 output 目录中</p></li><li><p>url-loader: 类似 file-loader,但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL</p></li><li><p>img-loader:图片最小化的 loader,它有个依赖叫 imagemin，一般会和上面两个 loader 一起做图片的压缩</p></li><li><p>svg-url-loader:svg 文件是 xml 字符串，使用 base-64 不是必须的，使用 utf-8 编码比 base64 有一些好处，比如编码后短一点，使用 gzip 压缩的时候效果好点，浏览器解析 utf-8 比 base64 快</p></li></ul></li></ul></li></ul><h2 id="第一步：先增加对图片的处理"><a href="#第一步：先增加对图片的处理" class="headerlink" title="第一步：先增加对图片的处理"></a><strong>第一步</strong>：先增加对图片的处理</h2><pre><code>{    test: /\.(jpe?g|png|gif)$/i,    use:[        {            loader: &quot;url-loader&quot;,            options:{                name: &quot;[name]-[hash:5].min.[ext]&quot;,                limit: 10000, // size &lt;= 20KB                publicPath: &quot;images/&quot;,                outputPath: &quot;images/&quot;            }        },    ]}</code></pre><h2 id="第二步：处理图片压缩"><a href="#第二步：处理图片压缩" class="headerlink" title="第二步：处理图片压缩"></a><strong>第二步</strong>：处理图片压缩</h2><p>这边对每一种格式都有一个 plugin，这些 plugin 都要 npm install 一下，然后具体的配置选项可以 github 上搜到，有图片优化需求的，要详细看一下各个选项</p><pre><code>{    test: /\.(jpe?g|png|gif)$/i,    use:[        {            loader: &quot;url-loader&quot;,            options:{                name: &quot;[name]-[hash:5].min.[ext]&quot;,                limit: 10000, // size &lt;= 20KB                publicPath: &quot;images/&quot;,                outputPath: &quot;images/&quot;            }        },    ]}</code></pre><p>可以执行 npm run dev 查看之前图片的大小和压缩后的大小，发现确实变小了</p><h2 id="第三步：生成雪碧图"><a href="#第三步：生成雪碧图" class="headerlink" title="第三步：生成雪碧图"></a><strong>第三步</strong>：生成雪碧图</h2><pre><code>{    loader:&#39;postcss-loader&#39;,    options: {        sourceMap: true,        config: {            path: __dirname + &#39;/postcss.config.js&#39;        },        plugins: [require(&quot;postcss-sprites&quot;)({            spritePath: &quot;./dist/images&quot;        })]    },},</code></pre><p>这里的 plugin 是为了生成雪碧图，效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/11577190-8efb3bbde7750c20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-03-15 at 11.23.08 PM.png"></p><h2 id="第四步：-字体处理"><a href="#第四步：-字体处理" class="headerlink" title="第四步： 字体处理"></a><strong>第四步</strong>： 字体处理</h2><ol><li>去 google font 下载个字体，如果翻不了墙，可以自己其他地方下一个，然后用在线字体转换器转换下，然后就能转出 ttf|otf|eot|woff 各种格式，这样本地就有字体文件了，然后解析的话，使用下面这个代码就可以</li></ol><pre><code>{    test: /.(ttf|otf|eot|svg|woff(2)?)(\?[a-z0-9]+)?$/,    exclude: /images/,  /* dont want svg images from image folder to be included */    use: [        {            loader: &#39;file-loader&#39;,            options: {                outputPath: &#39;fonts/&#39;,                name: &#39;[name][hash].[ext]&#39;,            },        },    ],}</code></pre><p>做完这个，就可以在 css 中包含自己的字体，自己可以命名下</p><pre><code>@font-face {  font-family: &quot;frankfont&quot;;  src: url(&quot;../fonts/RobotoCondensed-Regular.woff2&quot;) format(&quot;woff2&quot;),              url(&quot;../fonts/RobotoCondensed-Regular.woff&quot;) format(&quot;woff&quot;);}</code></pre><p>然后我们看一下使用的情况：</p><pre><code>    .hello {     font-family: frankfont Monaco Arial, Verdana, Tahoma, sans-serif;     font-size: 20px;     width: 300px;     font-weight: bold;     color: var(--color-black);     background: rgba(153, 221, 153, 0.8);    }</code></pre><p>具体的效果：</p><p>可以看到 hello css module 这句话，已经使用我们自己的字体了，图片压缩的效果和雪碧图生成效果如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/11577190-2f6d868cf74258f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen Shot 2019-03-15 at 11.20.55 PM.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>OK，好了，大概该做的都做完了，这基本任务算是都能处理了，其实还有好多东西要做，有空会多写一些。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how webpack handle css</title>
      <link href="/2020/10/02/qian-duan/webpack-scaffold-5/"/>
      <url>/2020/10/02/qian-duan/webpack-scaffold-5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="Webpack4-如何处理-css"><a href="#Webpack4-如何处理-css" class="headerlink" title="Webpack4 如何处理 css"></a>Webpack4 如何处理 css</h1><ul><li><a href="https://github.com/hyyfrank/webpack4" target="_blank" rel="noopener">github demo</a> branch: feature/lesson5</li></ul><h2 id="我们需要做什么"><a href="#我们需要做什么" class="headerlink" title="我们需要做什么"></a>我们需要做什么</h2><ul><li>支持 css 的处理</li><li>把 css 抽取成单独的 css 文件</li><li>支持 css module</li><li>支持 css next 等新特性</li><li>支持 css style lint 校验</li><li>减少无用的 css 代码</li><li>使用 post css 做些处理比如 autoprefix,css-next</li><li>最小化 css 文件<h2 id="需要什么-loader-和-plugin"><a href="#需要什么-loader-和-plugin" class="headerlink" title="需要什么 loader 和 plugin"></a>需要什么 loader 和 plugin</h2><blockquote><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS 文件！</p></blockquote></li><li><strong>loader</strong>:<ul><li>sass-loader: 简单说就是 sass 转换成 css</li><li>postcss-loader: postcss 很强大，可以这么简单理解下，css–&gt;ast–&gt;plugin–&gt;xxxx,大概就是，先把 css 转化为抽象语法树，然后使用 javascript 处理，然后厉害的就是，真的啥都有个插件，只有想不到!</li><li>css-loader:<strong>The <code>css-loader</code> interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code> and will resolve them.</strong>选项我们会用到 modules, localIdentName</li><li>style-loader:<strong>Adds CSS to the DOM by injecting a <code>&lt;style&gt;</code> tag</strong></li></ul></li><li><strong>plugin</strong>:<ul><li>mini-css-extract-plugin：抽取 css 成单独文件</li><li>purifycss-webpack： 删除没使用的 css 选择器</li><li>stylelint-webpack-plugin：对 css 做 lint</li><li>optimize-css-assets-webpack-plugin:webpack 在 build 的过程中优化和最小化 css，默认使用 cssnano 做预处理器，cssnano 也是个 postcss 的 plugin<br>好了，废话到此为止，上代码看下就都明了，为了让代码更清晰，我们把对 css 的处理单独拉出来，再通过 webpack-merge 合到一起，下面是 css 的处理代码：<br>抽取代码成单独文件，现在目测原来的 extract-text-webpack-plugin 还是能用的，如果是使用 webpack4 的话，也得更新 extract-text-webpack-plugin 的版本到^4.0.0-beta.0，下面注释掉的，大家可以加回来试试，因为 webpack4 推荐使用 mini-css-extract-plugin，所以我们就使用这个,而且 mini-css-extract-plugin 不支持 hmr,但是不是在开发环境，我们只放在生产环境，其实还是 ok 的。<br>第一步：<strong>support style-loader,css-loader,sass-loader</strong><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cssDevRules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'style-loader'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'css-loader?modules&amp;localIdentName=[name]_[local]_[hash:base64:5]'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'sass-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> cssProdRules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'css-loader?modules&amp;localIdentName=[name]_[local]_[hash:base64:5]'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'sass-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"is prod:"</span><span class="token operator">+</span>isProd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>          test<span class="token punctuation">:</span> <span class="token regex">/\.(css|sass|scss)$/</span><span class="token punctuation">,</span>          use<span class="token punctuation">:</span> isProd<span class="token operator">?</span> cssProdRules<span class="token punctuation">:</span>cssDevRules<span class="token punctuation">,</span>          exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="css支持"><a href="#css支持" class="headerlink" title="css支持"></a>css支持</h2>第二步：<strong>css-next /autoprefixer support</strong><br>加上 posts-loader 来支持 auto-prfix 自动增加，同时，为了支持 css-next 最新的特性，现在不需要单独加，看官方文档有个 postcss-preset-env，直接加了支持 autoprefixer,<a href="https://github.com/csstools/postcss-preset-env" target="_blank" rel="noopener">PostCSS Preset Env</a> 能把现代的 css 转化成大部分浏览器都能解析的样式，会根据浏览器的版本决定加什么样的 polyfill.<pre class=" language-shell"><code class="language-shell">npm install postcss-preset-env</code></pre>简单修改下 postcss.config.js<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"postcss-import"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>browsers<span class="token punctuation">:</span> <span class="token string">"last 2 versions"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>cssnano<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      config<span class="token punctuation">:</span> <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/postcss.config.js'</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ul></li></ul><h2 id="风格校验"><a href="#风格校验" class="headerlink" title="风格校验"></a>风格校验</h2><p>第三步：<strong>add style-lint support</strong><br>加 style-lint 来控制代码质量，当然我只是加上而已，具体规则要自己去定，或者你可以用标准的 stylelint-config-standard,对应的 plugin 是 stylelint-config-standard</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> StyleCssLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"stylelint-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> StyleLintPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StyleCssLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  configFile<span class="token punctuation">:</span> <span class="token string">".stylelintrc"</span><span class="token punctuation">,</span>  context<span class="token punctuation">:</span> <span class="token string">"src"</span><span class="token punctuation">,</span>  files<span class="token punctuation">:</span> <span class="token string">"**/*.scss"</span><span class="token punctuation">,</span>  failOnError<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  quiet<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>StyleLintPlugin<span class="token punctuation">,</span> MiniCssPlugin<span class="token punctuation">,</span> OptimizeCSSPlugin<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>当然也要加个.stylelintrc 文件,现在简单先用 stylelint-config-standard。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"stylelint-config-standard"</span><span class="token punctuation">}</span></code></pre><h2 id="移除冗余css"><a href="#移除冗余css" class="headerlink" title="移除冗余css"></a>移除冗余css</h2><p>第四步：<strong>remove unused css</strong><br>purifycss： 移除无用 css,有人使用 css tree shake 这种术语，anyway,感觉差不多</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PurifyCSSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"purifycss-webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> PurifyCssPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurifyCSSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  paths<span class="token punctuation">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  styleExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".css"</span><span class="token punctuation">,</span> <span class="token string">".scss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  purifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    whitelist<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"*purify*"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssPlugin<span class="token punctuation">,</span>  PurifyCssPlugin<span class="token punctuation">,</span>  StyleLintPlugin<span class="token punctuation">,</span>  OptimizeCSSPlugin  <span class="token comment" spellcheck="true">// new ExtractTextPlugin("styles.css"),</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="最小化CSS"><a href="#最小化CSS" class="headerlink" title="最小化CSS"></a>最小化CSS</h2><p>第五步：<strong>minimize css</strong><br>optimize-css-assets-webpack-plugin<br><strong>cssProcessor</strong>: 压缩和优化 CSS 的预处理器，现在默认是 cssnano.这是一个函数，接受一个 CSS 和 options 参数，返回 promise<br><strong>canPrint</strong>: {bool} 表示插件能够在 console 中打印信息，默认值是 true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCSSPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  cssProcessor<span class="token punctuation">:</span> cssnano<span class="token punctuation">,</span>  cssProcessorOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    discardComments<span class="token punctuation">:</span> <span class="token punctuation">{</span>      removeAll<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Run cssnano in safe mode to avoid</span>    <span class="token comment" spellcheck="true">// potentially unsafe transformations.</span>    safe<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  canPrint<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssPlugin<span class="token punctuation">,</span>  PurifyCssPlugin<span class="token punctuation">,</span>  StyleLintPlugin<span class="token punctuation">,</span>  OptimizeCSSPlugin  <span class="token comment" spellcheck="true">// new ExtractTextPlugin("styles.css"),</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>OK，好了，大概该做的都做完了，如果需要进一步处理，可以考虑 postcss 的一些 plugin，甚至可以自己写点 plugin,因为这是讲 webpack 不是 postcss，所以留给你自己探索吧～</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>start from a easy demo</title>
      <link href="/2020/10/02/qian-duan/webpack-scaffold-4/"/>
      <url>/2020/10/02/qian-duan/webpack-scaffold-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="webpack4-with-Babel-React-CSS-Module"><a href="#webpack4-with-Babel-React-CSS-Module" class="headerlink" title="webpack4 with Babel, React, CSS Module"></a>webpack4 with Babel, React, CSS Module</h1><ul><li>这节主要讲下 babel, react, css module 的简单引入，后续会根据需要再来修改，我们先做一个版本</li></ul><h2 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h2><ul><li><p>首先，看下需要装哪些包，都是干什么的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"react"</span><span class="token punctuation">:</span> <span class="token string">"^16.8.1"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//react package</span>  <span class="token string">"react-dom"</span><span class="token punctuation">:</span> <span class="token string">"^16.8.1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//the entry point to the DOM and server renderers for React</span>  <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.29.0"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// polyfill: you can use Promise, WeakMap,Array.from,Object.assign,Array.includes..</span>  <span class="token comment" spellcheck="true">// this is a polyfill, we need it to be a dependency</span>  <span class="token string">"@babel/polyfill"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.5"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Compile object rest and spread to ES5</span>  <span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">:</span> <span class="token string">"^7.3.2"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// re-use of Babel's injected helper code to save on codesize.</span>  <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.0"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//a library that contain's Babel modular runtime</span>  <span class="token comment" spellcheck="true">//helpers and a version of regenerator-runtime.</span>  <span class="token string">"@babel/runtime"</span><span class="token punctuation">:</span> <span class="token string">"^7.0.0-beta.55"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//babel comman line tool.</span>  <span class="token string">"@babel/cli"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.3"</span><span class="token punctuation">,</span>  <span class="token string">"@babel/core"</span><span class="token punctuation">:</span> <span class="token string">"^7.2.2"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//a smart preset that allows you to use the latest JavaScript without needing to        //micromanage which syntax transforms</span>  <span class="token string">"@babel/preset-env"</span><span class="token punctuation">:</span> <span class="token string">"^7.3.1"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//@babel/plugin-syntax-jsx</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-jsx</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-display-name</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-jsx-self</span>  <span class="token comment" spellcheck="true">//@babel/plugin-transform-react-jsx-source</span>  <span class="token string">"@babel/preset-react"</span><span class="token punctuation">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^8.0.5"</span><span class="token punctuation">,</span>  <span class="token string">"babel-plugin-transform-object-rest-spread"</span><span class="token punctuation">:</span> <span class="token string">"^6.26.0"</span><span class="token punctuation">,</span>  <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>  <span class="token string">"html-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.5.5"</span><span class="token punctuation">,</span>  <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.23.1"</span><span class="token punctuation">,</span>  <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0-beta.5"</span><span class="token punctuation">,</span>  <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.1"</span><span class="token punctuation">,</span>  <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.1"</span><span class="token punctuation">,</span>  <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^3.1.14"</span><span class="token punctuation">}</span></code></pre></li><li><p>这里要注意的是@babel/polyfill，这个要放在 dependencies 里边，因为是 polyfill,代码最后也是要在里边的，所以不能放在 devDependencies 里。接着看 babel 的配置文件。.babelrc</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token string">"current"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"@babel/preset-react"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"useBuiltIns"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="增加react支持"><a href="#增加react支持" class="headerlink" title="增加react支持"></a>增加react支持</h2></li><li><p>webpack.config.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token string">"@babel/polyfill"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这里要写，配置polyfill,也可以写在源码里</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>devtool<span class="token punctuation">:</span> <span class="token string">"cheap-module-source-map"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//production的source map</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//这里注意，要使用css module以及css module的格式</span>          loader<span class="token punctuation">:</span> <span class="token string">"css-loader?modules&amp;localIdentName=[name]_[hash:base64:5]"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//js/jsx使用babel-loader来处理</span>        loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">"html-loader"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模板</span>    filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>    hash<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//防止缓存</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>  extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>output<span class="token punctuation">:</span> <span class="token punctuation">{</span>  publicPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  filename<span class="token punctuation">:</span> <span class="token string">"[name]-bundle.js"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加这部分，当是开发环境的时候，再使用hmr和inline-source-map.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"development"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>baseConfig<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token string">"inline-source-map"</span><span class="token punctuation">;</span>baseConfig<span class="token punctuation">.</span>devServer <span class="token operator">=</span> <span class="token punctuation">{</span>  contentBase<span class="token punctuation">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>  hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> baseConfig<span class="token punctuation">;</span></code></pre><h2 id="第一个JSX"><a href="#第一个JSX" class="headerlink" title="第一个JSX"></a>第一个JSX</h2></li><li><p>然后写个简单的 jsx</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> style <span class="token keyword">from</span> <span class="token string">"../css/main.css"</span><span class="token punctuation">;</span><span class="token keyword">const</span> HomeComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//测试对象展开</span><span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 3, b: 4 }</span><span class="token comment" spellcheck="true">//测试array.from</span><span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试下promise</span><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试下symbol</span><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"symbol:"</span> <span class="token operator">+</span> sym<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello React16<span class="token number">.7</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>hello<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello CSS Module<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> HomeComponent<span class="token punctuation">;</span></code></pre><p>到这里就能让 react 的一个最简单的例子跑起来了,看下 index.js</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HomeComponent <span class="token keyword">from</span> <span class="token string">"./components/home"</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HomeComponent</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>package.json 里的 scripts 这样写</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"prod"</span><span class="token punctuation">:</span> <span class="token string">"webpack --mode production"</span><span class="token punctuation">,</span>  <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"NODE_ENV=development webpack-dev-server --mode development --open"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以看到，我们只是简单把一个react需要引入的东西引入进来，接下来，我们在这个最简单的例子上，逐步增加支持，让我们的应用更加professional</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack fundamentals</title>
      <link href="/2020/10/02/qian-duan/webpack-scaffold-3/"/>
      <url>/2020/10/02/qian-duan/webpack-scaffold-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="entry-配置模块的入口"><a href="#entry-配置模块的入口" class="headerlink" title="entry: 配置模块的入口"></a>entry: 配置模块的入口</h2><ul><li>webpack 寻找文件的时候会以 context 为基础，context 默认的是执行 webpack 的路径，比如我们项目就是默认根目录，当然也可以采取命令行去配置，比如 webpack –context<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirnaame<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>我们现在看到的 entry 里的路径也是相对于这个 context 的路径的，这个选项会影响后续配置的文件的路径</li><li>entry 可以配成三种方式 string, array, object,比如我们现在是一个页面就是‘./src/index.js’,多个页面的入口就是[‘./src/firstpage.js’,’./src/secondpage.js’]<ul><li>chunk: webpack 会为每个生成的 chunk 起名字，如果上面 entry 配了 string/array,则只有一个 chunk,如果配成 object,那么 chunk 会有多个，每个的名字就是 object 里的 key 的名字:</li></ul></li><li>配置动态 entry:<br>这个就是如果你有多个页面，要做多个入口，可以写成动态的，比如同步的直接返回一个 object，异步方式就返回一个 promise<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步</span>entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    first<span class="token punctuation">:</span> <span class="token string">"./src/firstpage"</span><span class="token punctuation">,</span>    second<span class="token punctuation">:</span> <span class="token string">"./src/sencordpage"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步</span>entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      first<span class="token punctuation">:</span> <span class="token string">"./src/firstpage"</span><span class="token punctuation">,</span>      second<span class="token punctuation">:</span> <span class="token string">"./src/secondpage"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="output-配置如何输出最终需要的代码"><a href="#output-配置如何输出最终需要的代码" class="headerlink" title="output:配置如何输出最终需要的代码"></a>output:配置如何输出最终需要的代码</h2></li><li>filename:如果只有一个，就是字符串，比如我们的 bundle.js,如果输出多个 chunk,就用通配符[name].js,<br>可以这样[id]-[name]-[hash]-[chunkhash].js,这几个都是他的内部变量，表示 chunk 的唯一标示，名称，唯一标示的 hash,chunk 内容的 hash</li><li>chunkFilename:比如 commonchunkplugin 输出的文件名，内置变量和上面一致</li><li>path：打包文件的输出目录</li><li>publicpath：这个就是静态资源如果放 cdn 上，需要去配的，可以自己写个域名放上去看看效果就知道了</li><li>crossOriginLoading：输出的时候如果需要异步加载一些资源，这个就是配置这些资源的获取，一般是通过 jsonp 来做的，会往 html 里插一个</li><li>libraryTarget &amp; library：配置以什么方式导出库和导出库的名称</li><li>libraryExport： 如果上面导出方式是 commons/commonjs2 的时候，你可以在这里导出你想导出的字模块<h2 id="module-配置处理模块的规则"><a href="#module-配置处理模块的规则" class="headerlink" title="module:配置处理模块的规则"></a>module:配置处理模块的规则</h2></li><li>rules 配置模块的读取和解析规则，就是配置 loader 的时候，一般是一个数组，然后每一部分配置怎么处理一个类型的文件，每一部分包括三个方面<ul><li>匹配到需要处理的文件，包括 test(支持数组), include, exclude</li><li>使用特定的 loader 来处理这些匹配到的文件 babel-loader, css-loader…loader 如果有多个参数需要传入，可以使用 object 来传递，经常看到的是 option:{xxxx}这样的</li><li>执行 loader 的顺序可以调整到最开始或者最后执行，通过 enforce 来配置，设为 pre/post</li></ul></li><li>noParse: 这个就是用来让 webpack 忽略一些文件，比如 jquery/chartjs,举个例子：<pre class=" language-javascript"><code class="language-javascript">noParse<span class="token punctuation">:</span><span class="token operator">|</span>jquery<span class="token regex">/chartjs/</span><span class="token comment" spellcheck="true">// 或者是函数形式</span>noParse<span class="token punctuation">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">/</span>jquery<span class="token regex">/chartjs/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li>parser: 支持 amd, commonjs,systemjs,es6,举个例子<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    moudle<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'babel:loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            parser<span class="token punctuation">:</span><span class="token punctuation">[</span>                amd<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                commonjs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                system<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                harmony<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                requireInclude<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用require.include</span>                requireEnsure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用require.ensure</span>                requireContext<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用require.context</span>                browserify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                requireJs<span class="token punctuation">:</span><span class="token boolean">false</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="resolve-webpack-如何寻找模块所对应的文件"><a href="#resolve-webpack-如何寻找模块所对应的文件" class="headerlink" title="resolve: webpack 如何寻找模块所对应的文件"></a>resolve: webpack 如何寻找模块所对应的文件</h2></li><li>alias: 就是别名，比如你 import 的时候，它会替换成真正的位置<pre class=" language-javascript"><code class="language-javascript">resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>  alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>    components<span class="token punctuation">:</span> <span class="token string">"./src/components"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>上面代码就会在你 import xxx from “components/xxx”的时候帮你替换成“./src/components/xxx”</li><li>mainFields: 有的模块提供不同环境的代码，这个字段可以指定优先使用哪个版本</li><li>extentions: 让 webpack 在寻找文件的时候，找这样扩展名的文件，你导入文件的时候不指定后缀名的话，会去看这个选项的配置，然后去寻找<pre><code>// 先去找ts文件，然后js,然后json文件extentsions:[&#39;.ts&#39;,&#39;.js&#39;,&#39;.json&#39;]</code></pre></li><li>modules: resolve.modules 配置 web pack 去哪些目录寻找第三方模块，默认指定 node_modules,一般我们应用会这样配<pre><code>modules:[&#39;./src/components&#39;,&#39;node_modules&#39;]</code></pre>这样配后，你以前可能需要 import xxx from ../../../components/xxx 就可以直接 import xxx from xxx;简洁了许多</li><li>enforeExtention: 如果配成 true,那么你 import 语句就必须加后缀名，否则会找不到<h2 id="plugins-配置扩展插件"><a href="#plugins-配置扩展插件" class="headerlink" title="plugins:配置扩展插件"></a>plugins:配置扩展插件</h2></li><li>我们项目里用到了一些，你也可以看到，其实引入都是大同小异，主要是要搞清楚这里面的具体的配置项<ul><li>dev-server:配置 dev-server<ul><li>hot: 我们在配置 hot module replacement 的时候会配的</li><li>inline： 一般使用这个模式，打开之后，webpack 通过代理客户端控制模块替换和刷新，如果关闭，那它文件变化后，会通过 iframe 的方式去运行，要到 localhost:8080/webpack-dev-server 看效果</li><li>还有一些配置项，参考文档，比如 historyApiFallback, contentBase ,headers ,host, port, allowHosts ,disableHostCheck, https,clientLogLevel,compress,open 这些都可以去看看，经常涉及到</li></ul></li><li>others:其他配置项，配置文件不止可以返回 object,也可以返回其他形式<ul><li>target: 针对不同的环境，比如 web, node,async-node,webworker,electron-main,electron-renderer</li><li>Devtool: 配置 webpack 如何生成 sourcemap</li><li>watch: 配置文件更新监听</li><li>external：有些第三方库，这些不需要 webpack 打包，比如 jquery</li><li>ResolveLoader: 告诉 webpack 如何发现 loader</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>introduction to redis</title>
      <link href="/2020/10/02/hou-duan/redis/redis-1/"/>
      <url>/2020/10/02/hou-duan/redis/redis-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个主要记录一些使用Redis的心得</p></blockquote><p>#Redis包括什么<br><img src="/images/redis.jpg" alt="Redis 知识全景图"><br>再来一张，这张图暴露了使用redis经常碰到的问题<br><img src="/images/redis2.jpeg" alt="Redis 问题一览"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hot Module Replacement</title>
      <link href="/2020/10/01/qian-duan/webpack-scaffold-2/"/>
      <url>/2020/10/01/qian-duan/webpack-scaffold-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h2 id="version-in-package-json"><a href="#version-in-package-json" class="headerlink" title="version in package.json"></a>version in package.json</h2><ol><li><p>package.json 里的^和~有啥区别</p><ul><li>这个其实就是说明你项目中可以用哪个版本的软件，例如：3.4.5 类似 MAJOR.MINOR.PATCH 这种格式，这个叫 sematic versioning, 官网地址(<a href="https://semver.org/)。" target="_blank" rel="noopener">https://semver.org/)。</a><ul><li>MAJOR: 引入了不向后兼容的 API</li><li>MINOR:引入了向后兼容的 API.</li><li>PATCH:修 bug 的版本</li></ul></li><li>举个例子，一般发布 API 版本从 1.0.0，修了四个 bug,变成 1.0.4，引入新的 API,但是这些 API 向后兼容，那就变成 1.1.0，再修两个 bug,就变成 1.1.2，如果新的版本加入了新 API 是不向后兼容的，可能会破坏依赖，这种版本就是 2.0.0，以此类推</li><li>package.json 的情况是，~3.4.5 就是指 3.4.x 这样的版本，但是不超过 3.5.0， ^3.4.5 的意思就是 3.x.x 都是，但是低于 4.0.0 的版本。这样说就好理解了(具体看我上面的提供的链接)。</li><li>我们常见的 npm install antd –save 通常你在 package.json 看到的是^3.13.0 就是你可以使用 3.x.x 的版本但低于 4.0.0.当然有规则就有例外，如果是 0 开头的，有些许不同，简单讲，可以将^理解成~就成了，具体官方网页瞄一眼就明白了。</li><li>再说 hot replacement module(HRM)之前，需要了解几个东西，我们在上次的例子里来继续做：<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2>html-webpack-plugin: 这个 plugin 可以帮我们生成 html 文件，比如如果不使用他，你打包了，js 都到 dist 目录下(官方喜欢用 dist，我们就把 build 改成 dist),那你的 html 是不是还要自己手动引用这个新生成的地址，怎么自动化也帮我们把 html 生成并且把生成的 dist 目录下的 js 也引用进来呢，这个 plugin 就做这个事情，代码如下：<pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//模板,可以指定模板，但是要指定loader,这里我们用html-loader</span>  template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出文件的文件名字，默认就是index.html,路径是相对于webpackConfig.output.path路径</span>  filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//防止缓存,也就是生成的时候引用的时候，会有一个参数，这样就每次都去加载这个js，浏览器认为这是一个新的文件，有的人会做增量更新，其实道理差不多，就是用新的名字，让浏览器强制加载新的文件</span>  hash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//压缩的选项，字面意思，不知道的话，可以看下官网</span>  minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeRedundantAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        useShortDoctype<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>    viewport<span class="token punctuation">:</span> <span class="token string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span><span class="token punctuation">,</span>    <span class="token string">"theme-color"</span><span class="token punctuation">:</span> <span class="token string">"#4285f4"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>生成了 html 长这样,第一图是压缩的，第二图是 format 之后，因为我们制定了压缩，所以生成第一图这样的代码，这里要注意 webpack.config.js 里的 publicpath,如果指定，那么，生成的 js 的地址会变成 publicpath/bundle.js?71ac66103d2a 这样的引用</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span>UTF-8</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>viewport</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span>X-UA-Compatible</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>viewport</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1,shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>theme-color</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>#4285f4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>HTML WEBPACK PLUGIN TEMPLATE.   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>bundle.js?71ac66103d2a01102753</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h2><p>我们之前有一个删除目录的npm包，webpack里也有相应的plugin可以做这个事情，代码如下：</p><pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="css-plugin"><a href="#css-plugin" class="headerlink" title="css plugin"></a>css plugin</h2><p>关于 css, 本来想使用 mini-css-extract-plugin，但是这个 plugin 目前不支持 HRM,所以用老的就行</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>然后要配置 webpack-dev-server 和 HotModuleReplacementPlugin</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Dev_server_plugin 在 webpack 里这样配：</p><pre class=" language-javascript"><code class="language-javascript">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>      contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>      hot<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="final-package-json"><a href="#final-package-json" class="headerlink" title="final package.json"></a>final package.json</h2><p>所有安装的 plugin 都需要 cnpm install,package.json 如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"webpack4"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"repository"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"git+https://github.com/hyyfrank/webpack4.git"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"bugs"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/hyyfrank/webpack4/issues"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack --watch"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"homepage"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/hyyfrank/webpack4#readme"</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.29.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.1"</span><span class="token punctuation">,</span>    <span class="token string">"css-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.5.5"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0-beta.5"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token punctuation">:</span> <span class="token string">"^0.23.1"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.1"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token punctuation">:</span> <span class="token string">"^3.1.14"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="final-webpack-config-js"><a href="#final-webpack-config-js" class="headerlink" title="final webpack.config.js"></a>final webpack.config.js</h2><p>webpack.config.js 最后长这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">"./src/index.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> <span class="token string">"inline-source-map"</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模板</span>      filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>      hash<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//防止缓存</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    publicPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">"[name]-bundle.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h2><p>打开浏览器的inspector,到console面板里，看到有个字写[WDS] Hot Module Replacement enabled.说明 hrm 是好的，你修改下 JS 会发现立马自己更新。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>introduction to webpack4</title>
      <link href="/2020/09/28/qian-duan/webpack-scaffold-1/"/>
      <url>/2020/09/28/qian-duan/webpack-scaffold-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个webpack4的前端架构主题，主要涉及怎么从0到1构建前端脚手架<br>如何把最新流行的技术整合在一起,涉及react,redux,webpack4相关技术<br>也包含一些项目构建需要的东西，比如gitignore,code format，不同环境设置，<br>热部署，调试环境等等问题</p></blockquote><h2 id="webpack-scaffold"><a href="#webpack-scaffold" class="headerlink" title="webpack scaffold"></a>webpack scaffold</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>第一：开发环境<br>使用 vscode, <a href="https://github.com/hyyfrank/react_with_webpack" target="_blank" rel="noopener">github</a> 概念啥的很多地方都讲过了，这里水一下，请看<a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">文档</a> OK, 接着开始讲怎么用，一般项目需要的功能，我们一个个做,先做个例子，看看打包大概流程是怎么样的，不 bb.</p></li><li><p>先用 npm 初始化项目，当然用 yarn 也行，执行 npm -init -y 就生成 package.json 文件了(最好换 cnpm 稍微快点)</p></li><li><p>先去 vscode 的 plugin 下一个 html boilerplate 然后写 html 就舒服了，先写个 html,这时候只要简单建个文件输入 html:5 回车，就得到一个简单的 html5 文件了</p></li><li><p>简单加个 css 文件和 js 文件，那三剑客就齐了，这也是最网页最简单的样子了</p><pre class=" language-html"><code class="language-html">    <span class="token doctype">&lt;!DOCTYPE html></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello Webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Say hello to webpack4!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h3><ol><li>为了简单看到 html 网页的效果，我们装个库：cnpm install http-server -g</li><li>我要用 webpack 自然得装下，cnpm install webpack -g</li><li>启动网页，用我们刚才得 http-server: http-server -p 3000, 访问 <a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a> 就能看到简单页面</li></ol><h3 id="webpack入坑"><a href="#webpack入坑" class="headerlink" title="webpack入坑"></a>webpack入坑</h3><ul><li><p>简单网页打完收工。接着就是来使用 webpack 来打包和混淆了 js 了。</p><ol><li>先简单试一下：./node_modules/webpack/bin/webpack.js ./main.js bundle.js<br>然后你去把 html 里的 js 的 src 改成 bundle.js，打开网页看下，也是好的，说明 webpack 已经把 main.js 打包成 bundle.js 了，你可以去看下里边代码长什么样，有个了解</li><li>当然，我不能每次都自己动手去改这个 html 和输入命令吧，所以我们 webpack 提供了配置文件的方式来让你写，结合 package.json 里的 scripts 部分，可以让我们加命令，这样就不会敲命令敲到手软了</li><li>开始正式打包<ul><li>web pack.config.js 长这样：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>   entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>     app<span class="token punctuation">:</span> <span class="token string">"./src/main.js"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   output<span class="token punctuation">:</span> <span class="token punctuation">{</span>     publicPath<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/build/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// js引用路径或者CDN地址</span>     path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包文件的输出目录</span>     filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>结果<br>和我们刚才命令行差不多，不过这次用配置文件的方式展示出来,啥意思呢，就是上面注释那意思。什么，你不知道 entry 和 output 的意思，拜托，稍微看下文档，中文的也行啊，起码有个大概了解【参考文章开始的链接】，写完这个，直接在当前目录下打 webpack 命令搞定！然后我们把命令放在 package.json 里的 scripts 部分，以后直接 npm run build 就跑这个构建命令，就方便了，如下：(这里 webpack 是全局装的，方便点)</li></ul></li></ol><ul><li><p>把命令放进去package.json</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span></code></pre></li><li><p>OK,那我每次执行完构建，会生成一个 build 目录，我不想每次自己手动去删掉，所以，我们可以构建之前先删除这个文件，然后再开始构建，简单装个酷，cnpm install rmdir-cli,然后我们的 package.json 里的 build 脚本变成：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"rmdir-cli build &amp;&amp; webpack --watch"</span></code></pre><p>稍微调整下文件结构，加个 src 目录来放 js, 只需要修改下 webpack.config.js 里的 entry 的路径就可以了,当然了你 html 如果要应用到文件，js 的 src 要改成从 build 中去取就行了，详细代码看我的 github repo,watch 就是为了你能监听文件的变化，修改文件 webpack 重新编译你也能看到</p></li><li><p>各种规范打包出来的样子<br>因为支持 webpack 支持 ES6、CommonJs 和 AMD 规范，所以都可以在 js 里去写，举个栗子，加上 es6：</p></li></ul><p>main.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> addtwo <span class="token keyword">from</span> <span class="token string">"./add"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"javascript say hello."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addtwo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>add.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a+b ="</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>重新构建下，跑一下，看看打开 html 里的 chrome dev tool,看看 a+b=3 有没有打出来。搞定！</p><p>看一眼打完包是什么样子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">:</span> n<span class="token punctuation">,</span>    l<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> o<span class="token punctuation">,</span> o<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>m <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>c <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    r<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token string">"undefined"</span> <span class="token operator">!=</span> <span class="token keyword">typeof</span> Symbol <span class="token operator">&amp;&amp;</span>      Symbol<span class="token punctuation">.</span>toStringTag <span class="token operator">&amp;&amp;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token string">"Module"</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;</span> t <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&amp;</span> t <span class="token operator">&amp;&amp;</span> <span class="token string">"object"</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> e <span class="token operator">&amp;&amp;</span> e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>__esModule<span class="token punctuation">)</span> <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> e      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token number">2</span> <span class="token operator">&amp;</span> t <span class="token operator">&amp;&amp;</span> <span class="token string">"string"</span> <span class="token operator">!=</span> <span class="token keyword">typeof</span> e<span class="token punctuation">)</span>    <span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> o <span class="token keyword">in</span> e<span class="token punctuation">)</span>        r<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>          n<span class="token punctuation">,</span>          o<span class="token punctuation">,</span>          <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> t <span class="token operator">=</span>      e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>__esModule        <span class="token operator">?</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>o <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>r<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token string">"/Users/hyy/github/webpack4/build/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">"use strict"</span><span class="token punctuation">;</span>  r<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"javascript say hello."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a+b ="</span><span class="token punctuation">,</span> e <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> e <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>今天困了，先写到这吧，不知道说啥了，扯个淡收场吧！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack4 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.x 单元测试</title>
      <link href="/2019/03/02/hou-duan/spring/springboot2.x-dan-yuan-ce-shi/"/>
      <url>/2019/03/02/hou-duan/spring/springboot2.x-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个 bug 被隐藏的时间越长，修复这个 bug 的代价就越大。</p></blockquote><p>我曾经在 <a href="https://blinkfox.github.io/2018/11/15/hou-duan/java/dan-yuan-ce-shi-zhi-nan/" target="_blank" rel="noopener">单元测试指南</a> 一文中写到过单元测试的必要性和 Java 单元测试相关的工具及方法。单元测试能帮助我们在早期就规避、发现和修复很多不易察觉的 bug 和漏洞，而且更能保障后期的需求变动和代码重构时所带来的隐患，减少测试成本和维护成本。在 SpringBoot2.x 集成和写单元测试更加容易了。</p><h2 id="创建-SpringBoot2-x-项目"><a href="#创建-SpringBoot2-x-项目" class="headerlink" title="创建 SpringBoot2.x 项目"></a>创建 SpringBoot2.x 项目</h2><p>在 <a href="https://start.spring.io/" target="_blank" rel="noopener">start.spring.io</a> 中创建一个自己的 SpringBoot2.x 项目，目前版本<code>2.1.3</code>。选出自己需要的一些组件生成项目即可，我这里选了如下几个：</p><ul><li><code>Web</code>: Web项目</li><li><code>JPA</code>: 数据库持久层采用<a href="https://spring.io/guides/gs/accessing-data-jpa/" target="_blank" rel="noopener">Spring Data JPA</a>，方便实用</li><li><code>Lombok</code>: 可以通过注解大量减少Java中重复代码的书写</li><li><code>HSQLDB</code>: 内存数据库，用来对 <code>Repository</code> 层做单元测试</li></ul><p>生成之后可以在 <code>pom.xml</code> 中看到 SpringBoot2.x 项目中已经引入了<code>spring-boot-starter-test</code>这个启动组件，包含了几乎绝大多数测试场景需要的组件。然后通过<code>mvn clean install</code>来构建本项目或者直接导入 IDE 开发工具即可。</p><p>下面将以对博客信息做简单修改和查询为示例来说明在 Spring Boot 中如何分别对 <code>DAO</code>，<code>Service</code>，<code>Controller</code> 做单元测试。</p><h2 id="DAO-层的单元测试"><a href="#DAO-层的单元测试" class="headerlink" title="DAO 层的单元测试"></a>DAO 层的单元测试</h2><h3 id="新建数据库脚本"><a href="#新建数据库脚本" class="headerlink" title="新建数据库脚本"></a>新建数据库脚本</h3><p>DAO 层的测试我这里采用的是 <code>HSQLDB</code> 的内存数据库，最好准备一些初始化的数据表结构和脚本，当然也可用直接通过官方示例的 <code>JPA</code>特性和 API 代码来初始化数据。这里我还是通过脚本的方式来做，便于统一管理和维护表结构和数据。</p><p>在 <code>src/test</code> 目录下新建 <code>resources</code> 资源目录，并在 <code>resources</code> 目录下新建 <code>db</code> 目录，在 <code>db</code> 目录下分别，新建用于管理的表结构文件(<code>schema.sql</code>)和初始化数据文件(<code>data.sql</code>)的 SQL 脚本。</p><p><code>schema.sql</code> 文件中的内容如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建数据库表所在的模式 schema.</span><span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> test<span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 在 test 模式下创建数据库表.</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> test<span class="token punctuation">.</span>t_test_blog<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span>t_test_blog <span class="token punctuation">(</span>    c_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    c_author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c_content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dt_publish_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    c_title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c_url <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    n_status <span class="token keyword">int</span><span class="token punctuation">,</span>    c_create_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dt_create_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    dt_update_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk_test_blog <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><p><code>data.sql</code> 文件中的内容如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 初始化插入一些博客信息数据.</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test<span class="token punctuation">.</span>t_test_blog <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'这是内容'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:01'</span><span class="token punctuation">,</span> <span class="token string">'Spring从入门到精通'</span><span class="token punctuation">,</span> 'https:<span class="token comment" spellcheck="true">//baidu.com', '1', 'tom', '2019-03-01 00:41:33', '2019-03-01 00:41:36');</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test<span class="token punctuation">.</span>t_test_blog <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'这是Mybatis的内容'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:01'</span><span class="token punctuation">,</span> <span class="token string">'Mybatis基础'</span><span class="token punctuation">,</span> 'https:<span class="token comment" spellcheck="true">//qq.com', '2', 'jack', '2019-03-01 00:41:33', '2019-03-01 00:41:36');</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><h3 id="增加-yaml-配置文件及内容"><a href="#增加-yaml-配置文件及内容" class="headerlink" title="增加 yaml 配置文件及内容"></a>增加 yaml 配置文件及内容</h3><p>在 <code>resources</code> 目录下新建 <code>application-hsqldb.yml</code> 配置文件，用于存放 HSQLDB 及 JPA 相关的配置信息，主要配置内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>hsqldb<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>db_test <span class="token comment" spellcheck="true"># 以内存数据库的方式来运行.</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.hsqldb.jdbc.JDBCDriver    <span class="token key atrule">platform</span><span class="token punctuation">:</span> hsqldb    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema.sql    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/data.sql  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> none <span class="token comment" spellcheck="true"># 这里没用 JPA 的自动生成表结构等功能，你可以视自己的具体情况来开启.</span>    <span class="token key atrule">generate-ddl</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 启动时是否初始化数据库.</span></code></pre><h3 id="准备实体-POJO-和-DAO-层-Repository-类"><a href="#准备实体-POJO-和-DAO-层-Repository-类" class="headerlink" title="准备实体 POJO 和 DAO 层 Repository 类"></a>准备实体 POJO 和 DAO 层 Repository 类</h3><p>博客信息的实体 POJO 类如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Column<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Entity<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Id<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Table<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>Accessors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 博客实体. * * @author blinkfox on 2019-2-26. */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_test_blog"</span><span class="token punctuation">,</span> schema <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * ID.     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 作者.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_author"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 标题.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_title"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 内容.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_content"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发布时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_publish_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date publishTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 链接地址.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_url"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 状态.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"n_status"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建用户.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_create_user"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String createUser<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_create_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最后更新时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_update_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>下面是 <code>BlogRepository</code> 中的一个简单的自定义 <code>@Query</code> 查询，当然你也可以采用名称的规则来写本查询，我这里为了做示例，使用了 <code>@Query</code> 查询。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Blog<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>Query<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * BlogRepository. * * @author blinkfox on 2019-02-27. */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Blog<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT b FROM Blog AS b WHERE b.title like 'Spring%'"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="BlogRepository-的单元测试"><a href="#BlogRepository-的单元测试" class="headerlink" title="BlogRepository 的单元测试"></a>BlogRepository 的单元测试</h3><p>然后在 Intellij IDEA 中通过 <code>Ctrl + Shift + T</code> 来为 <code>BlogRepository</code> 生成它对应的单元测试类 <code>BlogRepositoryTest</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Blog<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>DataJpaTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ActiveProfiles<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * BlogRepositoryTest. * * @author blinkfox on 2019-03-01. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"hsqldb"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DataJpaTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogRepositoryTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> BlogRepository blogRepository<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试新增博客的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> <span class="token string">"newblogId"</span><span class="token punctuation">;</span>        String title <span class="token operator">=</span> <span class="token string">"Java 从入门到放弃"</span><span class="token punctuation">;</span>        blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogOptional <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> title<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试查询所有 Spring 相关的博客信息.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Spring从入门到精通"</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样就完成了 DAO 层代码的测试，以上程序主要依托于内存数据库 HSQLDB 和 Spring Data JPA。</p><h2 id="Service-层的单元测试"><a href="#Service-层的单元测试" class="headerlink" title="Service 层的单元测试"></a>Service 层的单元测试</h2><p>实际开发过程中，Service 层中的类依赖了 DAO 层中的类或其他 Service 类。为了隔离对其他 Service 类或 DAO 层中的类的依赖，只测试本 Service 类中的方法逻辑，就需要 Mock 数据和做打桩等操作。Spring Boot 中原生集成了 <a href="https://site.mockito.org/" target="_blank" rel="noopener">Mockito</a>，可以非常方便我们对 Java 代码做单元测试。</p><h3 id="新建-BlogService-类"><a href="#新建-BlogService-类" class="headerlink" title="新建 BlogService 类"></a>新建 BlogService 类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>BlogRepository<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * BlogService. * * @author blinkfox on 2019-03-01. */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> BlogRepository blogRepository<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询所有 Spring 相关的博客信息.     *     * @return 博客信息     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入了获取 Spring 相关博客的 Service 方法."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据博客ID来修改该博客的名称.     *     * @param id 博客ID     * @param title 博客标题     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogOptional <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>blogOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"需要修改名称的博客不存在，id为【{}】请检查！"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="BlogService-的单元测试"><a href="#BlogService-的单元测试" class="headerlink" title="BlogService 的单元测试"></a>BlogService 的单元测试</h3><p>通过 <code>BlogService</code> 可以生成和书写出其对应的单元测试类和测试方法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>BlogRepository<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>InjectMocks<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>Mock<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>Mockito<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>MockitoJUnitRunner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * BlogServiceTest. * * @author blinkfox on 2019-03-01. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>MockitoJUnitRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token keyword">private</span> BlogRepository blogRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@InjectMocks</span>    <span class="token keyword">private</span> BlogService blogService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试service层中获取Spring相关博客的方法.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造需要返回的博客信息集合数据.</span>        Blog blog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Spring Action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>blogList<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 断言验证查询到的数据.</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Spring Action"</span><span class="token punctuation">,</span> blog<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试根据博客ID来修改该博客的名称成功时的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Mock 相关数据和类方法的行为.</span>        String id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Mockito<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"算法导论"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证 blogRepository.save(s) 方法被调用过一次.</span>        Mockito<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Mockito<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试根据博客ID来修改该博客的名称失败时的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileByIdWithFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Mock 未根据 ID 找到对应的博客信息的情况.</span>        String id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"算法导论"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证 blogRepository.save(s) 方法并没有被调用过.</span>        Mockito<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">,</span> Mockito<span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Mockito<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>注意</strong>：这里的 <code>@RunWith</code> 采用的是 Mocktio 提供的 <code>MockitoJUnitRunner</code>。</p></blockquote><p>这样就完成了 Service 层的单元测试，也是我们业务开发中需要重点关注和测试业务逻辑的一层。</p><h2 id="Controller-层的单元测试"><a href="#Controller-层的单元测试" class="headerlink" title="Controller 层的单元测试"></a>Controller 层的单元测试</h2><p>Controller 层测试的重点是测试接口是否能正常工作。可以用到 Spring Boot 中提供的 <code>@WebMvcTest</code> 注解来模拟 Web 层的单元测试。当然，也需要通过 Mock 的方式类隔离对 Service 层各个类的依赖影响。</p><h3 id="新建-BlogController-类"><a href="#新建-BlogController-类" class="headerlink" title="新建 BlogController 类"></a>新建 BlogController 类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">.</span>BlogService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ResponseEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PatchMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * BlogController. * * @author blinkfox on 2019-02-28. */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> BlogService blogService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取所有 Spring 相关的博客信息.     *     * @return Spring相关的博客信息     */</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Blog<span class="token operator">>></span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据博客ID修改博客名称.     *     * @param id 博客ID     * @param title 博客标题     * @return 空     */</span>    <span class="token annotation punctuation">@PatchMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span> String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"修改博客名称成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改博客名称出错，id为【{}】."</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="BlogController-的单元测试"><a href="#BlogController-的单元测试" class="headerlink" title="BlogController 的单元测试"></a>BlogController 的单元测试</h3><p>通过 <code>BlogController</code> 可以生成和书写出其对应的单元测试类和测试方法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span>MockMvcRequestBuilders<span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span>MockMvcRequestBuilders<span class="token punctuation">.</span>patch<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">.</span>BlogService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>Mockito<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>WebMvcTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>MockBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>MockMvc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * BlogControllerTest. * * @author blinkfox on 2019-03-02. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span>BlogController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MockBean</span>    <span class="token keyword">private</span> BlogService blogService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试获取所有 Spring 相关的博客信息.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试修改博客标题成功时的情况.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Mockito<span class="token punctuation">.</span><span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>Mockito<span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Mockito<span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"/blogs/1?title=Spring实战"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试修改博客标题失败时的情况.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileByIdWithException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Mockito<span class="token punctuation">.</span><span class="token function">doThrow</span><span class="token punctuation">(</span>RuntimeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>Mockito<span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Mockito<span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"/blogs/1?title=Spring实战"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is5xxServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上就完成了对 Controller 层的单元测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Spring Boot 中做单元测试的将会非常容易。上面只是 Spring Boot 中提供的部分方式，<a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#boot-features-testing" target="_blank" rel="noopener">Spring Boot 文档</a> 中还有其他更多的测试场景和测试方法供你去参考和使用。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL基础知识整理</title>
      <link href="/2018/09/25/shu-ju-ku/postgresql-ji-chu-zhi-shi-zheng-li/"/>
      <url>/2018/09/25/shu-ju-ku/postgresql-ji-chu-zhi-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库操作DML"><a href="#数据库操作DML" class="headerlink" title="数据库操作DML"></a>数据库操作DML</h2><h3 id="CREATE-TABLE"><a href="#CREATE-TABLE" class="headerlink" title="CREATE TABLE"></a>CREATE TABLE</h3><p><code>CREATE TABLE</code>语句用于创建数据库中的表。语法是：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名称 <span class="token punctuation">(</span>列名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>列名<span class="token number">2</span> 数据类型<span class="token punctuation">,</span>列名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id <span class="token keyword">integer</span><span class="token punctuation">,</span>user_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">integer</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>注意</strong>：字段类型<code>char</code>和<code>varchar</code>区别：</p><ul><li>容纳固定长度的字符串。</li><li>容纳可变长度的字符串。</li></ul><h3 id="CONSTRAINT"><a href="#CONSTRAINT" class="headerlink" title="CONSTRAINT"></a>CONSTRAINT</h3><p>约束、限制，常见的约束如下：</p><ul><li><code>CHECK</code>(检查约束)</li><li><code>NOT NULL</code>(非空约束)</li><li><code>UNIQUE</code>(唯一约束)</li><li><code>Primary Key</code>(主键)</li><li><code>Foreign Key</code>(外键)</li></ul><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 各种约束的使用示例</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>    id <span class="token keyword">integer</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    corp_id <span class="token keyword">integer</span> <span class="token keyword">REFERENCES</span> corp <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    user_name <span class="token keyword">text</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    age <span class="token keyword">numeric</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h3><p><code>ALTER TABLE</code>用来添加，删除或修改现有表中的列，也可以用来添加和删除现有表上的各种制约因素。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 现有表中添加一个新的列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">ADD</span> <span class="token keyword">column</span> datatype<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中删除一个新的列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> <span class="token keyword">column</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中更改数据类型的列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token keyword">column</span> datatype<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中一列添加NOT NULL约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">MODIFY</span> <span class="token keyword">column</span> datatype <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中添加唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> MyUniqueConstraint <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中添加CHECK约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> MyUniqueConstraint <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中添加PRIMARY KEY约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> MyPrimaryKey <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中删除约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">DROP</span> <span class="token keyword">CONSTRAINT</span> MyUniqueConstraint<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 现有表中删除主键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token keyword">DROP</span> <span class="token keyword">CONSTRAINT</span> MyPrimaryKey<span class="token punctuation">;</span></code></pre><h3 id="DROP-TABLE"><a href="#DROP-TABLE" class="headerlink" title="DROP TABLE"></a>DROP TABLE</h3><p><code>DROP TABLE</code>语句是用来删除表定义及其所有相关的数据表的索引，规则，触发器和约束。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span><span class="token punctuation">;</span></code></pre><h3 id="TRUNCATE-TABLE"><a href="#TRUNCATE-TABLE" class="headerlink" title="TRUNCATE TABLE"></a>TRUNCATE TABLE</h3><p><code>TRUNCATE TABLE</code>命令用于从现有的表删除完整的数据。在每个表上的DELETE（删除）具有相同的效果，但是，因为它没有实际扫描的表，它的速度快。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span>  <span class="token keyword">table</span><span class="token punctuation">;</span></code></pre><h3 id="DELETE-FROM"><a href="#DELETE-FROM" class="headerlink" title="DELETE FROM"></a>DELETE FROM</h3><p><code>DELETE FROM</code>用来从一个表中删除现有的记录。可以使用WHERE子句DELETE查询删除所选行，否则所有的记录会被删除。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h3><p><code>INSERT INTO</code>语句允许一个到一个表中插入新行。一个可以作为一个查询的结果，在一个时间或几行插入一行。基本语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注</strong>：<br>1.这里 column1, column2,…columnN是要插入数据的表中的列名。</p><ol start="2"><li>可以以任何顺序列出目标列名。 VALUES子句或查询的值都与显式或隐式的列列表从左到右。</li></ol></blockquote><p>如果要添加表中的所有列的值，可能不需要在SQL查询中指定列（次）名称。但要确保表中是在相同的顺序的列值的顺序。INSERT INTO语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p><code>UPDATE</code>被用来修改现有的表中的记录。可以使用<code>UPDATE</code>查询的<code>WHERE</code>子句更新选定行，否则会被更新的所有行。基本语法如下：</p><pre><code>UPDATE table SET column1 = value1, column2 = value2...., columnN = valueN WHERE [condition];</code></pre><h2 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h2><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span></code></pre><h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><p>找出表内的不同值的情况。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> id<span class="token punctuation">,</span> email <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span></code></pre><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="AND-OR"><a href="#AND-OR" class="headerlink" title="AND / OR"></a>AND / OR</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token punctuation">[</span>condition1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">AND</span><span class="token operator">|</span><span class="token operator">OR</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>condition2<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="IN-NOT-IN"><a href="#IN-NOT-IN" class="headerlink" title="IN / NOT IN"></a>IN / NOT IN</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token keyword">column</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> user_name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="BETWEEN-…-AND-…"><a href="#BETWEEN-…-AND-…" class="headerlink" title="BETWEEN … AND …"></a>BETWEEN … AND …</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token keyword">column</span> <span class="token operator">BETWEEN</span> <span class="token string">'value1'</span> <span class="token operator">AND</span> <span class="token string">'value2'</span><span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token number">25</span><span class="token punctuation">;</span></code></pre><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token keyword">column</span> <span class="token operator">LIKE</span> {模式}<span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> user_name <span class="token operator">LIKE</span> <span class="token string">'%张%'</span><span class="token punctuation">;</span></code></pre><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">column</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token punctuation">,</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注</strong>：ASC（默认）代表结果会以由小往大的顺序列出，而DESC代表结果会以由大往小的顺序列出。</p></blockquote><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> user_name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span></code></pre><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> user_name<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_name<span class="token punctuation">;</span></code></pre><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><p>对函数产生的值来设定条件。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1 <span class="token keyword">HAVING</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> user_name<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>ages<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_name <span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1500</span><span class="token punctuation">;</span></code></pre><h3 id="ALIAS"><a href="#ALIAS" class="headerlink" title="ALIAS"></a>ALIAS</h3><blockquote><p>SELECT ‘表别名’.’列名’ AS ‘列别名’ FROM table AS ‘表别名’;</p></blockquote><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>user_name <span class="token keyword">AS</span> name<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> ages <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">AS</span> u <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span>store_name<span class="token punctuation">;</span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><code>AVG</code> (平均)</li><li><code>COUNT</code> (计数)</li><li><code>MAX</code> (最大值)</li><li><code>MIN</code> (最小值)</li><li><code>SUM</code> (总合)</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> fun_name<span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span></code></pre><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> user_count <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">AS</span> u<span class="token punctuation">;</span></code></pre><h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><p>INNER JOIN: 如果表中有至少一个匹配，则返回行；<br>LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行；<br>RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行；<br>FULL JOIN: 只要其中一个表中存在匹配，就返回行。</p><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>uesr_name<span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>corp_name <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">AS</span> u <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> corp <span class="token keyword">AS</span> <span class="token number">c</span> <span class="token keyword">ON</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token operator">=</span> u<span class="token punctuation">.</span>corp_id<span class="token punctuation">;</span></code></pre><h2 id="SQL进阶"><a href="#SQL进阶" class="headerlink" title="SQL进阶"></a>SQL进阶</h2><h3 id="UNION-UNION-ALL"><a href="#UNION-UNION-ALL" class="headerlink" title="UNION / UNION ALL"></a>UNION / UNION ALL</h3><p><code>UNION</code>用于合并两个或多个SELECT语句的结果，不返回任何重复的行。<code>UNION ALL</code>运算符语句，则包括重复行的结果。使用UNION，每个SELECT选择的列数必须具有相同的，相同数目的列表达式相同的数据类型，并让它们在相同的顺序，但它们不必是相同的长度。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2 <span class="token punctuation">]</span><span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2 <span class="token punctuation">]</span><span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span></code></pre><h3 id="INTERSECT-INTERSECT-ALL"><a href="#INTERSECT-INTERSECT-ALL" class="headerlink" title="INTERSECT / INTERSECT ALL"></a>INTERSECT / INTERSECT ALL</h3><p>和<code>UNION</code>指令类似，<code>INTERSECT</code>也是对两个SQL语句所产生的结果做处理的。不同的地方是，<code>UNION</code>基本上是一个<code>OR</code>(如果这个值存在于第一句或是第二句，它就会被选出)，而<code>INTERSECT</code>则比较像<code>AND</code>(这个值要存在于第一句和第二句才会被选出)。<code>UNION</code>是并集，而<code>INTERSECT</code>是交集。<code>INTERSECT ALL</code>则包含交集后的重复数据。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2 <span class="token punctuation">]</span><span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token keyword">INTERSECT</span> <span class="token punctuation">[</span><span class="token keyword">INTERSECT</span> <span class="token keyword">ALL</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2 <span class="token punctuation">]</span><span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span></code></pre><h3 id="EXCEPT-EXCEPT-ALL"><a href="#EXCEPT-EXCEPT-ALL" class="headerlink" title="EXCEPT / EXCEPT ALL"></a>EXCEPT / EXCEPT ALL</h3><p><code>EXCEPT</code>用于求差集，其将查询在前一个结果集中但是不再后面一个结果集中的记录。<code>EXCEPT ALL</code>则包含交集后的重复数据。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2 <span class="token punctuation">]</span><span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token keyword">EXCEPT</span> <span class="token punctuation">[</span><span class="token keyword">EXCEPT</span> <span class="token keyword">ALL</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2 <span class="token punctuation">]</span><span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：在其他数据库求差集的关键字是：<code>MINUS</code>。</p></blockquote><h3 id="SUBQUERY"><a href="#SUBQUERY" class="headerlink" title="SUBQUERY"></a>SUBQUERY</h3><p><code>SUBQUERY</code>即子查询，子查询也是一个普通查询，目的是将用子查询返回的数据将被用来在主查询中作为条件，以进一步限制要检索的数据。可以使用子查询的有SELECT，INSERT，UPDATE和DELETE语句，与运算符如=，&lt;，&gt;，&gt;=，&lt;=，IN等一起使用。有几个子查询必须遵循的规则：</p><ul><li>必须用括号括起来的子查询。</li><li>子查询只能有一个在SELECT子句中的列，除非多列在主查询的查询来比较其选定的列。</li><li>ORDER BY不能使用在子查询中，虽然主查询就可以使用ORDER BY。GROUP BY可以用来执行相同的功能在子查询中的ORDER BY。</li><li>子查询返回多于一行只能用于使用多值的运算符，如为IN，EXISTS，IN，ANY / SOME，ALL运算符。</li></ul><p>使用示例如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- SELECT语句中的子查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> COMPANY <span class="token keyword">WHERE</span> ID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ID <span class="token keyword">FROM</span> COMPANY <span class="token keyword">WHERE</span> SALARY <span class="token operator">></span> <span class="token number">45000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- INSERT语句的子查询</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> COMPANY_BKP <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> COMPANY <span class="token keyword">WHERE</span> ID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ID <span class="token keyword">FROM</span> COMPANY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- UPDATE语句的子查询</span><span class="token keyword">UPDATE</span> COMPANY <span class="token keyword">SET</span> SALARY <span class="token operator">=</span> SALARY <span class="token operator">*</span> <span class="token number">0.50</span> <span class="token keyword">WHERE</span> AGE <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> AGE <span class="token keyword">FROM</span> COMPANY_BKP <span class="token keyword">WHERE</span> AGE <span class="token operator">>=</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- UPDATE语句的子查询</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> COMPANY <span class="token keyword">WHERE</span> AGE <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> AGE <span class="token keyword">FROM</span> COMPANY_BKP <span class="token keyword">WHERE</span> AGE <span class="token operator">></span> <span class="token number">27</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="EXISTS-NOT-EXISTS"><a href="#EXISTS-NOT-EXISTS" class="headerlink" title="EXISTS / NOT EXISTS"></a>EXISTS / NOT EXISTS</h3><p><code>EXISTS</code>用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False。EXISTS指定一个子查询，检测行的存在。<code>NOT EXISTS</code>的作用与<code>EXISTS</code>正好相反。如果子查询没有返回行，则满足了<code>NOT EXISTS</code>中的<code>WHERE</code>子句。语法如下： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">EXISTS</span> subquery</code></pre><p>EXISTS 和 IN 的比较：</p><ul><li>EXISTS(包括 NOT EXISTS )子句的返回值是一个BOOLEAN值。EXISTS内部有一个子查询语句(SELECT … FROM…)，我将其称为EXIST的内查询语句。其内查询语句返回一个结果集。EXISTS子句根据其内查询语句的结果集空或者非空，返回一个布尔值。而IN引导的子查询只能返回一个字段</li><li>EXISTS : 强调的是是否返回结果集，不要求知道返回什么，IN则需要知道返回的字段值。</li><li>EXISTS与IN的使用效率的问题，通常情况下采用exists要比in效率高，因为IN不走索引，但要看实际情况具体使用：IN适合于外表大而内表小的情况；EXISTS适合于外表小而内表大的情况。</li></ul><h3 id="CONCATENATE"><a href="#CONCATENATE" class="headerlink" title="CONCATENATE"></a>CONCATENATE</h3><p>连接字符串。有的时候，我们有需要将由不同列获得的资料串连在一起。每一种数据库都有提供方法来达到这个目的。</p><ul><li>Oracle: CONCAT(), || </li><li>SQL Server: + </li><li>MySQL: CONCAT() </li><li>PostgreSQL: CONCAT(), || </li></ul><p>PostgreSQL的<code>CONCAT()</code>的语法如下：</p><blockquote><p>concat(str “any” [, str “any” [, …] ])</p></blockquote><p>PostgreSQL的<code>||</code>的语法如下：</p><blockquote><p>string || string<br>string || non-string 或 non-string || string</p></blockquote><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>user_name <span class="token operator">||</span> <span class="token string">' '</span> <span class="token operator">||</span> u<span class="token punctuation">.</span>age <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">AS</span> u<span class="token punctuation">;</span></code></pre><h3 id="SUBSTRING"><a href="#SUBSTRING" class="headerlink" title="SUBSTRING"></a>SUBSTRING</h3><p>截取字符串。</p><ul><li>Oracle: SUBSTR()</li><li>SQL Server: SUBSTRING()</li><li>MySQL: SUBSTR(), SUBSTRING()</li><li>PostgreSQL: SUBSTRING()</li></ul><p>PostgreSQL的SUBSTRING()语法如下：</p><ul><li>substring(string [from int] [for int]) 截取子字符串。</li><li>substring(string from pattern) 截取匹配POSIX正则表达式的子字符串。</li><li>substring(string from pattern for escape) 截取匹配SQL正则表达式的子字符串。</li></ul><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 得到hom</span>substring<span class="token punctuation">(</span><span class="token string">'Thomas'</span> <span class="token keyword">from</span> <span class="token number">2</span> <span class="token keyword">for</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 得到mas</span>substring<span class="token punctuation">(</span><span class="token string">'Thomas'</span> <span class="token keyword">from</span> <span class="token string">'...$'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 得到oma</span>substring<span class="token punctuation">(</span><span class="token string">'Thomas'</span> <span class="token keyword">from</span> '<span class="token operator">%</span><span class="token comment" spellcheck="true">#"o_a#"_' for '#')</span></code></pre><h3 id="TRIM"><a href="#TRIM" class="headerlink" title="TRIM"></a>TRIM</h3><p>SQL中的<code>TRIM</code>函数是用来移除掉一个字符串中的字头或字尾。最常见的用途是移除字首或字尾的空白。这个函数在不同的数据库中有不同的名称： </p><ul><li>Oracle: LTRIM(), RTRIM()</li><li>SQL Server: LTRIM(), RTRIM()</li><li>MySQL: TRIM(), LTRIM(), RTRIM()</li><li>PostgreSQL: TRIM(), BTRIM(), LTRIM(), RTRIM()</li></ul><p>PostgreSQL的TRIM()语法如下：</p><ul><li>trim([leading | trailing | both] [characters] from string) 从字符串string的开头/结尾/两边删除只包含characters中字符(缺省是空白)的最长的字符串。</li><li>btrim(string text [, characters text]) 从string开头和结尾删除只包含 characters中字符(缺省是空白)的最长字符串。</li><li>ltrim(string text [, characters text]) 从字符串string的开头删除只包含characters 中字符(缺省是一个空白)的最长的字符串。</li><li>rtrim(string text [, characters text]) 从字符串string的结尾删除只包含characters中字符(缺省是个空白)的最长的字符串。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 得到Tom</span>trim<span class="token punctuation">(</span>both <span class="token string">'x'</span> <span class="token keyword">from</span> <span class="token string">'xTomxx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 得到trim</span>btrim<span class="token punctuation">(</span><span class="token string">'xyxtrimyyx'</span><span class="token punctuation">,</span> <span class="token string">'xy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 得到trim</span>ltrim<span class="token punctuation">(</span><span class="token string">'zzzytrim'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 得到trim</span>rtrim<span class="token punctuation">(</span><span class="token string">'trimxxxx'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span></code></pre><h3 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h3><p><code>CASE</code>表达式是一种通用的条件表达式，类似于其它编程语言中的<code>if/else</code>语句。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span> <span class="token keyword">THEN</span> result     <span class="token punctuation">[</span><span class="token keyword">WHEN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">ELSE</span> result<span class="token punctuation">]</span><span class="token keyword">END</span></code></pre><p>示例如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span>     <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> sex <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">'女'</span>          <span class="token keyword">WHEN</span> sex <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token string">'男'</span>          <span class="token keyword">ELSE</span> <span class="token string">'未知'</span>     <span class="token keyword">END</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span></code></pre><h3 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h3><p><code>COALESCE</code>返回它的第一个非<code>NULL</code>的参数值。如果所有参数都是NULL那么返回NULL。它常用于在显示数据时用缺省值替换NULL。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">COALESCE</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>使用示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h3><p>当且仅当value1等于value2时，<code>NULLIF</code>才返回null。否则它返回value1。这些可以用于执行上面给出的<code>COALESCE</code>例子的反例。语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">NULLIF</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span></code></pre><h3 id="GREATEST-LEAST"><a href="#GREATEST-LEAST" class="headerlink" title="GREATEST / LEAST"></a>GREATEST / LEAST</h3><p>GREATEST和LEAST函数从一个任意数字表达式的列表里选取最大或者最小的数值。 这些表达式必须都可以转换成一个普通的数据类型，它将会是结果类型。列表中的NULL值将被忽略。只有所有表达式的结果都是 NULL 的时候，结果才会是 NULL。语法如下：</p><pre class=" language-sql"><code class="language-sql">GREATEST<span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>LEAST<span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>注意</strong>：GREATEST和LEAST都不是 SQL 标准，但却是很常见的扩展。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础介绍</title>
      <link href="/2018/09/17/hou-duan/spring/spring-ji-chu-jie-shao/"/>
      <url>/2018/09/17/hou-duan/spring/spring-ji-chu-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring-概述"><a href="#一、Spring-概述" class="headerlink" title="一、Spring 概述"></a>一、Spring 概述</h2><h3 id="（一）Spring-的简史"><a href="#（一）Spring-的简史" class="headerlink" title="（一）Spring 的简史"></a>（一）Spring 的简史</h3><p><a href="https://spring.io/" target="_blank" rel="noopener">Spring</a> 的历史网上有很多的介绍，下面是 Spring 发展历程的一个简介。</p><h4 id="1-第一阶段：xml-配置"><a href="#1-第一阶段：xml-配置" class="headerlink" title="1. 第一阶段：xml 配置"></a>1. 第一阶段：xml 配置</h4><p>在 Spring 1.x 时代，使用 Spring 开发满眼都是 xml 配置的 Bean，随着项目的扩大，我们需要把 xml 配置文件放到不同的配置文件里，那时候需要频繁地在开发的类和配置文件之间切换。</p><h4 id="2-第二阶段：注解配置"><a href="#2-第二阶段：注解配置" class="headerlink" title="2. 第二阶段：注解配置"></a>2. 第二阶段：注解配置</h4><p>在 Spring 2.x 时代，随着 JDK 1.5 带来的注解支持，Spring 提供了声明 Bean 的注解（如：@Component、@Service），大大减少了配置量。这时 Spring 圈子里存在着一种争论：注解配置和 xml 配置究竟哪个更好？我们最终的选择是应用的基本配置（如：数据库配置）用 xml，业务配置用注解。</p><h4 id="3-第三阶段：Java-配置"><a href="#3-第三阶段：Java-配置" class="headerlink" title="3. 第三阶段：Java 配置"></a>3. 第三阶段：Java 配置</h4><p>从 Spring 3.x 到现在，Spring 提供了 Java 配置的能力，使用 Java 配置可以让你更理解你配置的 Bean。我们目前刚好处于这个时代，Spring 4.x 和 Spring Boot 都推荐使用 Java 配置。</p><h3 id="（二）Spring-概述"><a href="#（二）Spring-概述" class="headerlink" title="（二）Spring 概述"></a>（二）Spring 概述</h3><p>Spring 框架是一个轻量级的企业级开发的一站式解决方案。所谓解决方案就是可以基于 Spring 解决 JavaEE 开发的所有问题。Spring 框架主要提供了<code>IoC</code>容器、AOP、数据访问、Web 开发、消息、测试等相关技术的支持。</p><p>Spring 使用简单的 POJO（<code>Plain Old Java Object</code>，即无任何限制的普通Java对象）来进行企业级开发。每一个被 Spring 管理的 Java 对象都被称之为 Bean；而 Spring 提供了一个 IoC 容器用来初始化对象，解决对象间的依赖管理和对象的使用。</p><h4 id="1-Spring-的模块"><a href="#1-Spring-的模块" class="headerlink" title="1. Spring 的模块"></a>1. Spring 的模块</h4><p>Spring 是模块化的，这意味着你可以只使用你需要的Spring的模块。如下图所示：</p><p><img src="http://static.blinkfox.com/spring_moudle.png" alt="Spring 模块"></p><p>图中的每个最小单元，Spring 都至少有一个对应的 jar 包。</p><h5 id="（1）核心容器（Core-Contariner）"><a href="#（1）核心容器（Core-Contariner）" class="headerlink" title="（1）核心容器（Core Contariner）"></a>（1）核心容器（Core Contariner）</h5><ul><li>Spring-Core：核心工具类，Spring 其他模块大量使用 Spring-Core</li><li>Spring-Beans：Spring 定义 Bean 的支持</li><li>Spring-Context：运行时 Spring 容器</li><li>Spring-Context-Support：容器对第三方包的集成支持</li><li>Spring-Expression：使用表达式语言在运行时查询和操作对象</li></ul><h5 id="（2）AOP"><a href="#（2）AOP" class="headerlink" title="（2）AOP"></a>（2）AOP</h5><ul><li>Spring-AOP：基于代理的 AOP 支持</li><li>Spring-Aspects：基于 AspectJ 的 AOP 支持</li></ul><h5 id="（3）消息（Messaging）"><a href="#（3）消息（Messaging）" class="headerlink" title="（3）消息（Messaging）"></a>（3）消息（Messaging）</h5><ul><li>Spring-Messaging：对消息架构和协议的支持</li></ul><h5 id="（4）Web"><a href="#（4）Web" class="headerlink" title="（4）Web"></a>（4）Web</h5><ul><li>Spring-Web：提供基础的 Web 集成的功能，在 Web 项目中提供 Spring 的容器</li><li>Spring-Webmvc：提供基于 Servlet 的 Spring MVC</li><li>Spring-WebSocket：提供 WebSocket 功能</li><li>Spring-Webmvc-Portlet：提供 Portlet 环境功能</li></ul><h5 id="（5）数据访问-集成（Data-Access-Integration）"><a href="#（5）数据访问-集成（Data-Access-Integration）" class="headerlink" title="（5）数据访问/集成（Data Access/Integration）"></a>（5）数据访问/集成（Data Access/Integration）</h5><ul><li>Spring-JDBC：提供以 JDBC 访问数据库的支持</li><li>Spring-TX：提供编程式和声明式的事务支持</li><li>Spring-ORM：提供对对象/关系映射技术的支持</li><li>Spring-OXM：提供对对象/xml 映射技术的支持</li><li>Spring-JMS：提供对 JMS 的支持</li></ul><h4 id="1-Spring-的生态"><a href="#1-Spring-的生态" class="headerlink" title="1. Spring 的生态"></a>1. Spring 的生态</h4><p>Spring 发展到现在已经不仅仅是 Spring 框架本身的内容，Spring 目前提供了大量的基于 Spring 的项目，可以用来更深入地降低我们的开发难度，提高开发效率。<br>目前 Spring 的生态里主要有以下项目，我们可以根据自己项目的需要来选择使用相应的项目。</p><ul><li>Spring Boot：使用默认开发配置来实现快速开发</li><li>Spring XD：用来简化大数据应用开发</li><li>Spring Cloud：为分布式系统开发提供工具集</li><li>Spring Data：对主流关系型和 NoSQL 数据库的支持</li><li>Spring Integration：通过消息机制对企业集成模式（EIP）的支持</li><li>Spring Batch：简化及优化大量数据的批处理操作</li><li>Spring Security：通过认证和授权保护应用</li><li>Spring HATEOAS：基于 HATEOAS 原则简化 REST 服务开发</li><li>Spring Social：与社交网络 API（如：Facebook、新浪微博等）的集成</li><li>Spring AMQP：对基于 AMQP 的消息的支持</li><li>Spring Mobile：提供对手机设备检测的功能，给不同的设备返回不同的页面的功能</li><li>Spring for Android：主要提供在 Android 上消费 RESTful API 的功能</li><li>Spring Web Flow：基于 SpringMVC 提供基于向导流程式的 Web 应用开发</li><li>Spring Web Services：提供了基于协议有限的 SOAP/Web 服务</li><li>Spring LDAP：简化使用 LDAP 开发</li><li>Spring Session：提供一个 API 及实现来管理用户会话信息</li></ul><h2 id="二、Spring-项目快速搭建"><a href="#二、Spring-项目快速搭建" class="headerlink" title="二、Spring 项目快速搭建"></a>二、Spring 项目快速搭建</h2><p>这里我们使用目前 Java 主流的项目构建工具<a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven</a>来搭建项目。</p><h3 id="（一）Maven-介绍"><a href="#（一）Maven-介绍" class="headerlink" title="（一）Maven 介绍"></a>（一）Maven 介绍</h3><p>Apache Maven 是一个基于项目对象模型（Project Object Model，POM）的软件项目管理工具。Maven 可用来管理项目的依赖、编译、打包、文档等信息。使用 Maven 来管理项目时，项目依赖的 jar 包将不再包含在项目内，而是集中放置在用户目录下的 .m2 文件夹下。关于 Maven 的详细安装介绍可参考<a href="http://blinkfox.com/linux-debianxia-mavende-an-zhuang-he-shi-yong/" target="_blank" rel="noopener">这里</a>。</p><h3 id="（二）创建项目"><a href="#（二）创建项目" class="headerlink" title="（二）创建项目"></a>（二）创建项目</h3><p>在创建项目之前，须确保你的计算机上已经安装好有 Java 和 Maven 环境。然后，打开终端通过以下简单的命令就可以在你的当前目录下创建一个 Jave web 的项目结构：</p><pre class=" language-bash"><code class="language-bash">mvn archetype:generate -DgroupId<span class="token operator">=</span>com.blinkfox -DartifactId<span class="token operator">=</span>springdemo -DpackageName<span class="token operator">=</span>com.blinkfox.springdemo -DarchetypeArtifactId<span class="token operator">=</span>maven-archetype-webapp -DinteractiveMode<span class="token operator">=</span>false</code></pre><p>其中<code>-DgroupId=com.blinkfox</code>是组织名，<code>-DartifactId=springdemo</code>是该组织下的项目名称，<code>-DarchetypeArtifactId=maven-archetype-webapp</code>代表创建一个简单的 webapp 项目。</p><p>创建项目的时候，Maven会自动下载一些需要用到的 jar 包和 Maven 插件。如果顺利创建成功的话，就会在你的当前目录下看到名为 springdemo 的项目，其中包含<code>src</code>的文件夹和<code>pom.xml</code>文件。且在你的终端会看到如下输出：</p><p><img src="http://static.blinkfox.com/maven_build_project.png" alt="Maven创建项目成功"></p><h3 id="（三）添加-Spring-依赖"><a href="#（三）添加-Spring-依赖" class="headerlink" title="（三）添加 Spring 依赖"></a>（三）添加 Spring 依赖</h3><p>接下来需要通过修改 pom.xml 来添加 Spring 的依赖，添加编译插件，且将编译级别设置为1.7，pom.xml文件的修改如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.blinkfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springdemo Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>springdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指定maven的默认操作为 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultGoal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultGoal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="三、Spring-基础配置"><a href="#三、Spring-基础配置" class="headerlink" title="三、Spring 基础配置"></a>三、Spring 基础配置</h2><p>Spring 框架本身有四大原则：</p><ul><li>使用 POJO 进行轻量级和最小侵入式开发</li><li>通过依赖注入和面向接口编程来实现松耦合</li><li>通过 AOP 和默认习惯进行声明式编程</li><li>使用 AOP 和模板(template)减少模式化代码</li></ul><p>Spring 的所有功能设计和实现都是基于此四大原则。</p><h3 id="（一）依赖注入"><a href="#（一）依赖注入" class="headerlink" title="（一）依赖注入"></a>（一）依赖注入</h3><h4 id="1-重点说明"><a href="#1-重点说明" class="headerlink" title="1. 重点说明"></a>1. 重点说明</h4><p>我们经常说的控制反转（Inversion of Control，IoC）和依赖注入（dependency injection，DI）在 Spring 环境下是等同的概念，控制反转是通过依赖注入实现的。所谓依赖注入指的是容器负责创建对象和维护对象间的依赖关系，而不是通过对象本身负责自己的创建和解决自己的依赖。</p><p>依赖注入的主要目的是为了解耦，体现了一种“组合”的理念。如果你希望你的类具备某项功能的时候，是继承自一个具有此功能的父类好呢？还是组合另外一个具有这个功能的类好呢？答案是不言而喻的，继承一个父类，之类将与父类耦合，组合另外一个类则使耦合度大大降低。</p><p>Spring IoC 容器（ApplicationContext）负责创建 Bean，并通过容器将功能类 Bean 注入到你需要的 Bean 中。Spring 提供使用 xml、注解、Java 配置、groovy 配置实现 Bean 的创建和注入。</p><p>无论是 xml 配置、注解配置还是 Java 配置，都被称为配置元数据，所谓元数据即描述数据的数据。元数据本身不具备任何可执行的能力，只能通过外界代码来对这些元数据行解析后进行一些有意义操作。Spring 容器解析这些配置元数据进行 Bean 初始化、配置和管理依赖。</p><p>声明 Bean 的注解：</p><ul><li><code>@Component</code>: 组件，没有明确角色</li><li><code>@Controller</code>: 在展现层（MVC -&gt; Spring MVC）使用</li><li><code>@Service</code>: 在业务逻辑层（service层）使用</li><li><code>@Repository</code>: 在数据访问层（dao层）使用</li></ul><p>注入 Bean 的注解，一般情况下通用：</p><ul><li><code>@Autowired</code>: Spring 提供的注解</li><li><code>@Inject</code>: JSR-330 提供的注解</li><li><code>@Resource</code>: JSR-250 提供的注解</li></ul><p><code>@Autowired</code>、<code>@Inject</code>、<code>@Resource</code>可注解在 set 方法上或者属性上，推荐注解在属性上，优点是代码更少、层次更清晰。</p><h4 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2. 代码示例"></a>2. 代码示例</h4><p>（1）编写功能类的 Bean。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> word <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>使用 @Service 注解声明当前 FunctionService 类是 Spring 管理的一个 Bean。其中，使用 @Component、@Service、@Repository、@Controller 是等效的，可根据需要选用。</li></ol></blockquote><p>（2）使用功能类的 Bean。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UseFunctionService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FunctionService functionService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> functionService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>使用 @Service 注解声明当前 UseFunctionService 类是 Spring 管理的一个 Bean。</li><li>使用 @Autowired 将 FunctionService 的实体 Bean 注入到 UseFunctionService 中，让 UseFunctionService 具备 FunctionService 的功能，此处使用 JSR-330 的 @Inject 注解或者 JSR-250 的 @Resource 注解是等效的。</li></ol></blockquote><p>（3）配置类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.blinkfox.service.impl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>使用 @Configuration 注解声明当前类是一个配置类。</li><li>使用 @ComponentScan 将 自动扫描包名下所有使用的 @Component、@Service、@Repository、@Controller 类，并注册为 Bean。</li></ol></blockquote><p>（4）运行。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>maintest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DiConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UseFunctionService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>DiConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UseFunctionService useFunctionService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UseFunctionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>useFunctionService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"Spring"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>使用 AnnotationConfigApplicationContext 作为 Spring 容器，接收使用一个配置类作为参数。</li><li>获得声明配置的 UseFunctionService 的 Bean。</li></ol></blockquote><h3 id="（二）Java-配置"><a href="#（二）Java-配置" class="headerlink" title="（二）Java 配置"></a>（二）Java 配置</h3><h4 id="1-重点说明-1"><a href="#1-重点说明-1" class="headerlink" title="1. 重点说明"></a>1. 重点说明</h4><p>Java 配置是 Spring4.x 推荐的配置方式，可以完全替代 xml 配置；Java 配置也是 Spring Boot 推荐的配置方式。</p><p>Java 配置是通过 @Configuration 和 @Bean 来实现的。</p><ul><li>@Configuration 声明当前类是一个配置类，相当于一个Spring配置的 xml 文件。</li><li>@Bean 注解在方法上，声明当前方法的返回值是一个 Bean。</li></ul><p>何时使用 Java 配置或者注解配置呢？我们主要的原则是：全局配置使用 Java 配置（如数据库相关配置、MVC相关配置），业务 Bean 的配置使用注解配置（@Service、@Component、@Repository、@Controller）。</p><h4 id="2-Java配置代码示例"><a href="#2-Java配置代码示例" class="headerlink" title="2. Java配置代码示例"></a>2. Java配置代码示例</h4><p>（1）编写功能类的 Bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token comment" spellcheck="true">// 1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfigService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> word <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>此处没有使用 @Service 声明 Bean。</li></ol></blockquote><p>（2）使用功能类的 Bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token comment" spellcheck="true">// 1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UseJavaConfigService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2</span>    <span class="token keyword">private</span> JavaConfigService javaConfigService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJavaConfigService</span><span class="token punctuation">(</span>JavaConfigService javaConfigService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>javaConfigService <span class="token operator">=</span> javaConfigService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> javaConfigService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>此处没有使用 @Service 声明 Bean。</li><li>此处没有使用 @Autowired 注解注入 Bean。</li></ol></blockquote><p>（3）Java 配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>JavaConfigService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UseJavaConfigService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>  <span class="token comment" spellcheck="true">// 2</span>    <span class="token keyword">public</span> JavaConfigService <span class="token function">javaConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JavaConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UseJavaConfigService <span class="token function">useJavaConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UseJavaConfigService useJavaConfigService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UseJavaConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        useJavaConfigService<span class="token punctuation">.</span><span class="token function">setJavaConfigService</span><span class="token punctuation">(</span><span class="token function">javaConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>        <span class="token keyword">return</span> useJavaConfigService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>使用 @Configuration 注解表明当前类是一个配置类，这意味着这个类型里可能有0个或者多个 @Bean 注解，此处没有使用包扫描，是因为所有的 Bean 都在此类中定义了。</li><li>使用 @Bean 注解声明当前方法 JavaConfigService 的返回值是一个 Bean，Bean的名称是方法名。</li><li>注入 FunctionService 的 Bean 时候直接调用 javaConfigService()。</li></ol></blockquote><p>（4）运行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>maintest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>config<span class="token punctuation">.</span>JavaConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UseJavaConfigService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfigMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>JavaConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UseJavaConfigService useJavaConfigService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UseJavaConfigService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>useJavaConfigService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"Spring Java Config"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="（三）AOP"><a href="#（三）AOP" class="headerlink" title="（三）AOP"></a>（三）AOP</h3><h4 id="1-重点说明-2"><a href="#1-重点说明-2" class="headerlink" title="1. 重点说明"></a>1. 重点说明</h4><p>AOP：面向切面编程，是面向对象编程（OOP）的补充。</p><p>Spring 的 AOP 的存在目的是为了解耦。AOP 可以让一组类共享相同的行为。在 OOP 中只能通过继承和实现接口来共享相同的行为，从而使代码的耦合度增强，且类继承只能为单继承，阻碍更多行为添加到一组类上，AOP 弥补了 OOP 的不足。</p><p>Spring 支持 AspectJ 的注解式切面编程。</p><ul><li>使用 @AspectJ 声明是一个切面。</li><li>使用 @After、@Before、Around 定义通知（advice）类型，可直接将拦截规则（切点）作为参数。</li><li>其中 @After、@Before、Around 参数的拦截规则为切点（PointCut），为了使切点复用，可使用 @PointCut 专门定义拦截规则，然后在 @After、@Before、Around 的参数中调用。</li><li>其中符合条件的每一个拦截处为连接点（JoinPoint）。</li></ul><p>Spring本身在事务处理（@Transcational）和数据缓存（@Cacheable）等都使用注解拦截。下面示例将演示基于注解和方法规则的拦截方式，演示一种模拟记录操作的日志系统的实现。</p><h4 id="2-注解拦截代码示例"><a href="#2-注解拦截代码示例" class="headerlink" title="2. 注解拦截代码示例"></a>2. 注解拦截代码示例</h4><p>（1）添加 Spring aop 支持及 AspectJ 依赖。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aop<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjrt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>（2）编写拦截规则的注解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/29. */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">LogAction</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"这是默认的操作名称"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：<br>注解本身是没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓的配置。注解的功能来自用这个注解的地方。</p></blockquote><p>（3）编写使用注解的被拦截类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>LogAction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/29. */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoAnnotationService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LogAction</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"注解式拦截的 add 操作"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）编写使用方法规则被拦截规类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/29. */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoMethodService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（5）编写切面。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>aop<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>LogAction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodSignature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/29. */</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">// 1</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.blinkfox.annotation.LogAction)"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotationPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"annotationPointCut()"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodSignature signature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LogAction logAction <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>LogAction<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---注解式拦截:"</span> <span class="token operator">+</span> logAction<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.blinkfox.service.impl.DemoMethodService.*(..))"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodSignature signature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---方法规则式拦截:"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>通过 @Aspect 注解声明一个切面。</li><li>通过 @Component 让此切面成为 Spring 容器管理的Bean。</li><li>通过 @PointCut 注解声明切点。</li><li>通过 @After 注解声明一个通知类型，并使用 @PointCut定义的切点。</li><li>通过可获得注解上的属性，然后做日志记录相关的操作，下面相同。</li><li>通过 @Before 注解声明一个通知类型，此通知直接使用拦截规则作为参数。</li></ol></blockquote><p>（6）配置类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableAspectJAutoProxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/29. */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.blinkfox"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>代码解释</strong>：</p><ol><li>使用 @EnableAspectJAutoProxy 注解开启 Spring 对 AspectJ的支持。</li></ol></blockquote><p>（6）运行。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>maintest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AopConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DemoAnnotationService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>DemoMethodService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by blinkfox on 2016/10/29. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AopConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DemoAnnotationService demoAnnotationService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>DemoAnnotationService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DemoMethodService demoMethodService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>DemoMethodService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoAnnotationService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoMethodService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
